
// This typemap tells the reposit SWIG module that type SimpleLib::Adder *
// should be treated like a char* as far as Excel is concerned.
%typemap(rp_tm_xll_cod) SimpleLib::Adder * "C";

// This directive specifies the directories to which the autogenerated output
// files should be written, and the name of the addin.
%module(
    rp_obj_dir="../AddinObjects",
    rp_add_dir="../AddinCpp",
    rp_csh_dir="../AddinCSharp",
    rp_xll_dir="../AddinXl",
    rp_cfy_dir="../AddinCfy",
    rp_obj_inc="AddinObjects",
    rp_add_inc="AddinCpp",
    rp_xll_inc="AddinXl",
    rp_cfy_inc="AddinCfy"
) SimpleLibAddin

// This pragma says that we want to group some functions under the label
// "adder".  This statement is required.
%group(adder);

// This directive tells the reposit SWIG module that SimpleLibAddin::Adder
// wraps SimpleLib::Adder.
OBJECT_WRAPPER(SimpleLibAddin::Adder, SimpleLib::Adder)

// This pragma specifies the #include statement that must be inserted into
// the source code for autogenerated objects.
%insert(adder_library_hpp) %{
#include "Library/adder.hpp"
%}

// This feature says that we want all functions encountered from this point
// on to be included in the C++ addin.  Everything is included in the Excel
// addin by default.
%generateall(c++);

// This code indicates which functionality from the SimpleLib library should be
// included in the addin.
namespace SimpleLib {
    std::string func();
    class Adder {
    public:
        Adder(long x);
        long add(long y);
    };
}
