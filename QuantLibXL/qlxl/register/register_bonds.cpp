
/*  
 Copyright (C) 2004, 2005, 2006, 2007, 2008 Eric Ehlers
 
 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
*/

// This file was generated automatically by gensrc.py.  If you edit this file
// manually then your changes will be lost the next time gensrc runs.

// This source code file was generated from the following stub:
//      C:/Users/erik/Documents/repos/reposit_old/quantlib-old/gensrc/gensrc/stubs/stub.excel.register.file

#include <xlsdk/xlsdkdefines.hpp>

// register functions in category Bonds with Excel

void registerBonds(const XLOPER &xDll) {

        Excel(xlfRegister, 0, 22, &xDll,
            // function code name
            TempStrNoSize("\x06""qlBond"),
            // parameter codes
            TempStrNoSize("\x0E""CCPPPPPPPCPPL#"),
            // function display name
            TempStrNoSize("\x06""qlBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x79""ObjectId,Description,Currency,SettlementDays,Calendar,FaceAmount,MaturityDate,IssueDate,LegID,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x33""Construct an object of class Bond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x2C""bond Currency. Default value = NullCurrency."),
            TempStrNoSize("\x23""settlement days. Default value = 3."),
            TempStrNoSize("\x3D""holiday calendar (e.g. TARGET). Default value = NullCalendar."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x30""maturity date. Default value = QuantLib::Date()."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1C""coupon vector Leg object ID."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x11""qlBondAccrualDays"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x11""qlBondAccrualDays"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x8B""Returns the total number of accrual days for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondAccrualEndDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondAccrualEndDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x46""Returns the accrual end date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x13""qlBondAccrualPeriod"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x13""qlBondAccrualPeriod"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x83""Returns the total accrual period for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondAccrualStartDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x16""qlBondAccrualStartDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x48""Returns the accrual start date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x13""qlBondAccruedAmount"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x13""qlBondAccruedAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x67""Returns the accrued amount for the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x11""qlBondAccruedDays"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x11""qlBondAccruedDays"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x7B""Returns the accrued days for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x13""qlBondAccruedPeriod"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x13""qlBondAccruedPeriod"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x7D""Returns the accrued period for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x0B""qlBondAlive"),
            // parameter codes
            TempStrNoSize("\x05""PPPP#"),
            // function display name
            TempStrNoSize("\x0B""qlBondAlive"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x15""Bonds,RefDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x35""filters the Bond object IDs of the still alive Bonds."),
            // parameter descriptions
            TempStrNoSize("\x13""vector of Bond IDs."),
            TempStrNoSize("\x91""reference date at which evaluate alive bonds. The current evaluation date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 15, &xDll,
            // function code name
            TempStrNoSize("\x23""qlBondAtmRateFromYieldTermStructure"),
            // parameter codes
            TempStrNoSize("\x07""PCCPEP#"),
            // function display name
            TempStrNoSize("\x23""qlBondAtmRateFromYieldTermStructure"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x35""ObjectId,YieldCurve,SettlementDate,CleanPrice,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x5F""Returns the ATM rate implied by the given YieldTermStructure, settlement date, and clean price."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x0C""clean price."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondBpsFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x12""qlBondBpsFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x53""Returns the basis point sensitivity implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 14, &xDll,
            // function code name
            TempStrNoSize("\x1F""qlBondBpsFromYieldTermStructure"),
            // parameter codes
            TempStrNoSize("\x06""PCCPP#"),
            // function display name
            TempStrNoSize("\x1F""qlBondBpsFromYieldTermStructure"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x2A""ObjectId,YieldCurve,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x60""Returns the basis point sensitivity implied by the given YieldTermStructure and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0E""qlBondCalendar"),
            // parameter codes
            TempStrNoSize("\x04""CCP#"),
            // function display name
            TempStrNoSize("\x0E""qlBondCalendar"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2E""Returns the calendar of the bond, e.g. TARGET."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x10""qlBondCleanPrice"),
            // parameter codes
            TempStrNoSize("\x04""ECP#"),
            // function display name
            TempStrNoSize("\x10""qlBondCleanPrice"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2B""Returns the clean price for the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x19""qlBondCleanPriceFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x19""qlBondCleanPriceFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x4C""Returns the bond clean price implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 14, &xDll,
            // function code name
            TempStrNoSize("\x26""qlBondCleanPriceFromYieldTermStructure"),
            // parameter codes
            TempStrNoSize("\x06""PCCPP#"),
            // function display name
            TempStrNoSize("\x26""qlBondCleanPriceFromYieldTermStructure"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x2A""ObjectId,YieldCurve,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x59""Returns the bond clean price implied by the given YieldTermStructure and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 18, &xDll,
            // function code name
            TempStrNoSize("\x1B""qlBondCleanPriceFromZSpread"),
            // parameter codes
            TempStrNoSize("\x0A""PCCEPPPPP#"),
            // function display name
            TempStrNoSize("\x1B""qlBondCleanPriceFromZSpread"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x53""ObjectId,YieldCurve,ZSpread,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x60""Returns the bond clean price implied by the given Z-Spread, discount curve, and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x0D""the Z-spread."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondConvexityFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondConvexityFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x45""Returns the convexity implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0E""qlBondCurrency"),
            // parameter codes
            TempStrNoSize("\x04""CCP#"),
            // function display name
            TempStrNoSize("\x0E""qlBondCurrency"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x1A""Returns the bond currency."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x11""qlBondDescription"),
            // parameter codes
            TempStrNoSize("\x04""CCP#"),
            // function display name
            TempStrNoSize("\x11""qlBondDescription"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x24""Returns the bond description string."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x19""qlBondDirtyPriceFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x19""qlBondDirtyPriceFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x4C""Returns the bond dirty price implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 18, &xDll,
            // function code name
            TempStrNoSize("\x17""qlBondDurationFromYield"),
            // parameter codes
            TempStrNoSize("\x0A""PCEPPPPPP#"),
            // function display name
            TempStrNoSize("\x17""qlBondDurationFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x53""ObjectId,Yield,DayCounter,Compounding,Frequency,DurationType,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x44""Returns the duration implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x48""Duration type (Simple, Macaulay, or Modified). Default value = Modified."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondFlowAnalysis"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x12""qlBondFlowAnalysis"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1A""ObjectId,AfterDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x24""Returns the bond cash flow analysis."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x47""Shows only cashflows after given date Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x10""qlBondIsTradable"),
            // parameter codes
            TempStrNoSize("\x05""LCPP#"),
            // function display name
            TempStrNoSize("\x10""qlBondIsTradable"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x81""Returns TRUE if the given Bond is tradable at the given settlement date. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlBondIssueDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x0F""qlBondIssueDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x23""Returns the issue date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondMaturityDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x12""qlBondMaturityDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x26""Returns the maturity date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondMaturityLookup"),
            // parameter codes
            TempStrNoSize("\x05""CPPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondMaturityLookup"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x16""Bonds,Maturity,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x33""returns the first maturity-matching Bond object ID."),
            // parameter descriptions
            TempStrNoSize("\x13""vector of Bond IDs."),
            TempStrNoSize("\x23""maturity date to look up Bonds for."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondMaturitySort"),
            // parameter codes
            TempStrNoSize("\x04""PPP#"),
            // function display name
            TempStrNoSize("\x12""qlBondMaturitySort"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x0D""Bonds,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x26""sorts the Bond object IDs by maturity."),
            // parameter descriptions
            TempStrNoSize("\x13""vector of Bond IDs."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondNextCashFlowAmount"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondNextCashFlowAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x20""Returns the next cash flow date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondNextCashFlowDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x16""qlBondNextCashFlowDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x22""Returns the next cash flow amount."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondNextCouponRate"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondNextCouponRate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\xE5""Returns the next coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the already-fixed not-yet-paid one."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x0E""qlBondNotional"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x0E""qlBondNotional"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x31""Returns the notional of the bond at a given date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlBondNotionals"),
            // parameter codes
            TempStrNoSize("\x04""PCP#"),
            // function display name
            TempStrNoSize("\x0F""qlBondNotionals"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x22""Returns the notionals of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x1C""qlBondPreviousCashFlowAmount"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x1C""qlBondPreviousCashFlowAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x26""Returns the previous cash flow amount."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x1A""qlBondPreviousCashFlowDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x1A""qlBondPreviousCashFlowDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x24""Returns the previous cash flow date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondPreviousCouponRate"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondPreviousCouponRate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\xD8""Returns the previous coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the last paid one."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondRedemptionAmount"),
            // parameter codes
            TempStrNoSize("\x04""PCP#"),
            // function display name
            TempStrNoSize("\x16""qlBondRedemptionAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2A""Returns the redemption amount of the bond."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondRedemptionDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x14""qlBondRedemptionDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x30""Returns the redemption payment date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondReferencePeriodEnd"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondReferencePeriodEnd"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x4F""Returns the reference period end date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x1A""qlBondReferencePeriodStart"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x1A""qlBondReferencePeriodStart"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x51""Returns the reference period start date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x15""qlBondSetCouponPricer"),
            // parameter codes
            TempStrNoSize("\x05""LCCP#"),
            // function display name
            TempStrNoSize("\x15""qlBondSetCouponPricer"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x29""ObjectId,FloatingRateCouponPricer,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2F""Set the coupon pricer at the given Bond object."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x25""FloatingRate coupon pricer object ID."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondSetCouponPricers"),
            // parameter codes
            TempStrNoSize("\x05""LCPP#"),
            // function display name
            TempStrNoSize("\x16""qlBondSetCouponPricers"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x29""ObjectId,FloatingRateCouponPricer,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2F""Set the coupon pricer at the given Bond object."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x25""FloatingRate coupon pricer object ID."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondSettlementDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondSettlementDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,EvaluationDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x28""Returns the settlement date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x73""The current global Settings::EvaluationDate is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondSettlementDays"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x14""qlBondSettlementDays"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x32""Returns the number of settlement days of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlBondStartDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x0F""qlBondStartDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x46""Returns the start (i.e. first accrual) date for the given Bond object."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 20, &xDll,
            // function code name
            TempStrNoSize("\x19""qlBondYieldFromCleanPrice"),
            // parameter codes
            TempStrNoSize("\x0C""ECEPPPPPPPP#"),
            // function display name
            TempStrNoSize("\x19""qlBondYieldFromCleanPrice"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x68""ObjectId,CleanPrice,DayCounter,Compounding,Frequency,SettlementDate,Accuracy,MaxIterations,Guess,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x60""Returns the yield for the given bond corresponding to the given clean price and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0C""clean price."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x23""tolerance. Default value = 1.0e-10."),
            TempStrNoSize("\x2E""max number of iterations. Default value = 100."),
            TempStrNoSize("\x1C""guess. Default value = 0.05."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 21, &xDll,
            // function code name
            TempStrNoSize("\x1B""qlBondZSpreadFromCleanPrice"),
            // parameter codes
            TempStrNoSize("\x0D""ECECPPPPPPPP#"),
            // function display name
            TempStrNoSize("\x1B""qlBondZSpreadFromCleanPrice"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x73""ObjectId,CleanPrice,YieldCurve,DayCounter,Compounding,Frequency,SettlementDate,Accuracy,MaxIterations,Guess,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x63""Returns the z-spread for the given bond corresponding to the given clean price and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0C""clean price."),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x23""tolerance. Default value = 1.0e-10."),
            TempStrNoSize("\x2E""max number of iterations. Default value = 100."),
            TempStrNoSize("\x1B""guess. Default value = 0.0."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel(xlfRegister, 0, 30, &xDll,
            // function code name
            TempStrNoSize("\x0D""qlCmsRateBond"),
            // parameter codes
            TempStrNoSize("\x16""CCPCNPPCPPCPPCPPPPPPL#"),
            // function display name
            TempStrNoSize("\x0D""qlCmsRateBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\xC7""ObjectId,Description,Currency,SettlementDays,PaymentBDC,FaceAmount,ScheduleID,FixingDays,IsInArrears,DayCounter,Floors,Gearings,SwapIndex,Spreads,Caps,Redemption,IssueDate,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3A""Construct an object of class CmsRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x4A""fixing days (e.g. 2). Default value = QuantLib::Null<QuantLib::Natural>()."),
            TempStrNoSize("\x38""TRUE if the fixing is in arrears. Default value = false."),
            TempStrNoSize("\x16""Payment DayCounter ID."),
            TempStrNoSize("\x3D""floor strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x2C""floating rate gearings. Default value = 1.0."),
            TempStrNoSize("\x19""floating swap rate index."),
            TempStrNoSize("\x2B""floating rate spreads. Default value = 0.0."),
            TempStrNoSize("\x3B""cap strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x26""Redemption value. Default value = 100."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel(xlfRegister, 0, 25, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlFixedRateBond"),
            // parameter codes
            TempStrNoSize("\x11""CCPCNPCPCPPPCPPL#"),
            // function display name
            TempStrNoSize("\x0F""qlFixedRateBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\xA1""ObjectId,Description,Currency,SettlementDays,FaceAmount,ScheduleID,Coupons,DayCounter,PaymentBDC,Redemption,IssueDate,PaymentCalendar,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3C""Construct an object of class FixedRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x27""simple annual compounding coupon rates."),
            TempStrNoSize("\x16""Payment DayCounter ID."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x28""Redemption value. Default value = 100.0."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x27""payment holiday calendar (e.g. TARGET)."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel(xlfRegister, 0, 24, &xDll,
            // function code name
            TempStrNoSize("\x10""qlFixedRateBond2"),
            // parameter codes
            TempStrNoSize("\x10""CCPCNPCPPPPCPPL#"),
            // function display name
            TempStrNoSize("\x10""qlFixedRateBond2"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x96""ObjectId,Description,Currency,SettlementDays,FaceAmount,ScheduleID,Coupons,PaymentBDC,Redemption,IssueDate,PaymentCalendar,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3C""Construct an object of class FixedRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x18""coupon InterestRate IDs."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x28""Redemption value. Default value = 100.0."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x27""payment holiday calendar (e.g. TARGET)."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel(xlfRegister, 0, 30, &xDll,
            // function code name
            TempStrNoSize("\x12""qlFloatingRateBond"),
            // parameter codes
            TempStrNoSize("\x16""CCPCNPPCPPCPPCPPPPPPL#"),
            // function display name
            TempStrNoSize("\x12""qlFloatingRateBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\xC7""ObjectId,Description,Currency,SettlementDays,PaymentBDC,FaceAmount,ScheduleID,FixingDays,IsInArrears,DayCounter,Floors,Gearings,IborIndex,Spreads,Caps,Redemption,IssueDate,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3F""Construct an object of class FloatingRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x4A""fixing days (e.g. 2). Default value = QuantLib::Null<QuantLib::Natural>()."),
            TempStrNoSize("\x38""TRUE if the fixing is in arrears. Default value = false."),
            TempStrNoSize("\x16""Payment DayCounter ID."),
            TempStrNoSize("\x3D""floor strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x2C""floating rate gearings. Default value = 1.0."),
            TempStrNoSize("\x14""floating rate index."),
            TempStrNoSize("\x2B""floating rate spreads. Default value = 0.0."),
            TempStrNoSize("\x3B""cap strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x26""Redemption value. Default value = 100."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel(xlfRegister, 0, 23, &xDll,
            // function code name
            TempStrNoSize("\x10""qlZeroCouponBond"),
            // parameter codes
            TempStrNoSize("\x0F""CCPCNCPPPPPPPL#"),
            // function display name
            TempStrNoSize("\x10""qlZeroCouponBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x85""ObjectId,Description,Currency,SettlementDays,Calendar,FaceAmount,Maturity,PaymentBDC,Redemption,IssueDate,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""1"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3D""Construct an object of class ZeroCouponBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x1F""holiday calendar (e.g. TARGET)."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x0E""maturity date."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x26""Redemption value. Default value = 100."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));



}

// unregister functions in category Bonds with Excel

void unregisterBonds(const XLOPER &xDll) {

    XLOPER xlRegID;

    // Unregister each function.  Due to a bug in Excel's C API this is a
    // two-step process.  Thanks to Laurent Longre for discovering the
    // workaround implemented here.

        Excel(xlfRegister, 0, 22, &xDll,
            // function code name
            TempStrNoSize("\x06""qlBond"),
            // parameter codes
            TempStrNoSize("\x0E""CCPPPPPPPCPPL#"),
            // function display name
            TempStrNoSize("\x06""qlBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x79""ObjectId,Description,Currency,SettlementDays,Calendar,FaceAmount,MaturityDate,IssueDate,LegID,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x33""Construct an object of class Bond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x2C""bond Currency. Default value = NullCurrency."),
            TempStrNoSize("\x23""settlement days. Default value = 3."),
            TempStrNoSize("\x3D""holiday calendar (e.g. TARGET). Default value = NullCalendar."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x30""maturity date. Default value = QuantLib::Date()."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1C""coupon vector Leg object ID."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x06""qlBond"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x11""qlBondAccrualDays"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x11""qlBondAccrualDays"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x8B""Returns the total number of accrual days for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x11""qlBondAccrualDays"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondAccrualEndDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondAccrualEndDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x46""Returns the accrual end date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x14""qlBondAccrualEndDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x13""qlBondAccrualPeriod"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x13""qlBondAccrualPeriod"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x83""Returns the total accrual period for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x13""qlBondAccrualPeriod"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondAccrualStartDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x16""qlBondAccrualStartDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x48""Returns the accrual start date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x16""qlBondAccrualStartDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x13""qlBondAccruedAmount"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x13""qlBondAccruedAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x67""Returns the accrued amount for the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x13""qlBondAccruedAmount"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x11""qlBondAccruedDays"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x11""qlBondAccruedDays"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x7B""Returns the accrued days for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x11""qlBondAccruedDays"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x13""qlBondAccruedPeriod"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x13""qlBondAccruedPeriod"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x7D""Returns the accrued period for the current coupon of the given bond. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x13""qlBondAccruedPeriod"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x0B""qlBondAlive"),
            // parameter codes
            TempStrNoSize("\x05""PPPP#"),
            // function display name
            TempStrNoSize("\x0B""qlBondAlive"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x15""Bonds,RefDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x35""filters the Bond object IDs of the still alive Bonds."),
            // parameter descriptions
            TempStrNoSize("\x13""vector of Bond IDs."),
            TempStrNoSize("\x91""reference date at which evaluate alive bonds. The current evaluation date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0B""qlBondAlive"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 15, &xDll,
            // function code name
            TempStrNoSize("\x23""qlBondAtmRateFromYieldTermStructure"),
            // parameter codes
            TempStrNoSize("\x07""PCCPEP#"),
            // function display name
            TempStrNoSize("\x23""qlBondAtmRateFromYieldTermStructure"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x35""ObjectId,YieldCurve,SettlementDate,CleanPrice,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x5F""Returns the ATM rate implied by the given YieldTermStructure, settlement date, and clean price."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x0C""clean price."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x23""qlBondAtmRateFromYieldTermStructure"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondBpsFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x12""qlBondBpsFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x53""Returns the basis point sensitivity implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x12""qlBondBpsFromYield"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 14, &xDll,
            // function code name
            TempStrNoSize("\x1F""qlBondBpsFromYieldTermStructure"),
            // parameter codes
            TempStrNoSize("\x06""PCCPP#"),
            // function display name
            TempStrNoSize("\x1F""qlBondBpsFromYieldTermStructure"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x2A""ObjectId,YieldCurve,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x60""Returns the basis point sensitivity implied by the given YieldTermStructure and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x1F""qlBondBpsFromYieldTermStructure"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0E""qlBondCalendar"),
            // parameter codes
            TempStrNoSize("\x04""CCP#"),
            // function display name
            TempStrNoSize("\x0E""qlBondCalendar"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2E""Returns the calendar of the bond, e.g. TARGET."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0E""qlBondCalendar"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x10""qlBondCleanPrice"),
            // parameter codes
            TempStrNoSize("\x04""ECP#"),
            // function display name
            TempStrNoSize("\x10""qlBondCleanPrice"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2B""Returns the clean price for the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x10""qlBondCleanPrice"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x19""qlBondCleanPriceFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x19""qlBondCleanPriceFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x4C""Returns the bond clean price implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x19""qlBondCleanPriceFromYield"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 14, &xDll,
            // function code name
            TempStrNoSize("\x26""qlBondCleanPriceFromYieldTermStructure"),
            // parameter codes
            TempStrNoSize("\x06""PCCPP#"),
            // function display name
            TempStrNoSize("\x26""qlBondCleanPriceFromYieldTermStructure"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x2A""ObjectId,YieldCurve,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x59""Returns the bond clean price implied by the given YieldTermStructure and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x26""qlBondCleanPriceFromYieldTermStructure"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 18, &xDll,
            // function code name
            TempStrNoSize("\x1B""qlBondCleanPriceFromZSpread"),
            // parameter codes
            TempStrNoSize("\x0A""PCCEPPPPP#"),
            // function display name
            TempStrNoSize("\x1B""qlBondCleanPriceFromZSpread"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x53""ObjectId,YieldCurve,ZSpread,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x60""Returns the bond clean price implied by the given Z-Spread, discount curve, and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x0D""the Z-spread."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x1B""qlBondCleanPriceFromZSpread"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondConvexityFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondConvexityFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x45""Returns the convexity implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x18""qlBondConvexityFromYield"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0E""qlBondCurrency"),
            // parameter codes
            TempStrNoSize("\x04""CCP#"),
            // function display name
            TempStrNoSize("\x0E""qlBondCurrency"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x1A""Returns the bond currency."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0E""qlBondCurrency"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x11""qlBondDescription"),
            // parameter codes
            TempStrNoSize("\x04""CCP#"),
            // function display name
            TempStrNoSize("\x11""qlBondDescription"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x24""Returns the bond description string."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x11""qlBondDescription"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 17, &xDll,
            // function code name
            TempStrNoSize("\x19""qlBondDirtyPriceFromYield"),
            // parameter codes
            TempStrNoSize("\x09""PCEPPPPP#"),
            // function display name
            TempStrNoSize("\x19""qlBondDirtyPriceFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x46""ObjectId,Yield,DayCounter,Compounding,Frequency,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x4C""Returns the bond dirty price implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x19""qlBondDirtyPriceFromYield"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 18, &xDll,
            // function code name
            TempStrNoSize("\x17""qlBondDurationFromYield"),
            // parameter codes
            TempStrNoSize("\x0A""PCEPPPPPP#"),
            // function display name
            TempStrNoSize("\x17""qlBondDurationFromYield"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x53""ObjectId,Yield,DayCounter,Compounding,Frequency,DurationType,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x44""Returns the duration implied by the given yield and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0B""bond yield."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x48""Duration type (Simple, Macaulay, or Modified). Default value = Modified."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x17""qlBondDurationFromYield"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondFlowAnalysis"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x12""qlBondFlowAnalysis"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1A""ObjectId,AfterDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x24""Returns the bond cash flow analysis."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x47""Shows only cashflows after given date Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x12""qlBondFlowAnalysis"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x10""qlBondIsTradable"),
            // parameter codes
            TempStrNoSize("\x05""LCPP#"),
            // function display name
            TempStrNoSize("\x10""qlBondIsTradable"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x81""Returns TRUE if the given Bond is tradable at the given settlement date. The current bond settlement is used if no date is given."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x10""qlBondIsTradable"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlBondIssueDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x0F""qlBondIssueDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x23""Returns the issue date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0F""qlBondIssueDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondMaturityDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x12""qlBondMaturityDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x26""Returns the maturity date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x12""qlBondMaturityDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondMaturityLookup"),
            // parameter codes
            TempStrNoSize("\x05""CPPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondMaturityLookup"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x16""Bonds,Maturity,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x33""returns the first maturity-matching Bond object ID."),
            // parameter descriptions
            TempStrNoSize("\x13""vector of Bond IDs."),
            TempStrNoSize("\x23""maturity date to look up Bonds for."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x14""qlBondMaturityLookup"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x12""qlBondMaturitySort"),
            // parameter codes
            TempStrNoSize("\x04""PPP#"),
            // function display name
            TempStrNoSize("\x12""qlBondMaturitySort"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x0D""Bonds,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x26""sorts the Bond object IDs by maturity."),
            // parameter descriptions
            TempStrNoSize("\x13""vector of Bond IDs."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x12""qlBondMaturitySort"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondNextCashFlowAmount"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondNextCashFlowAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x20""Returns the next cash flow date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x18""qlBondNextCashFlowAmount"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondNextCashFlowDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x16""qlBondNextCashFlowDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x22""Returns the next cash flow amount."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x16""qlBondNextCashFlowDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondNextCouponRate"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondNextCouponRate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\xE5""Returns the next coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the already-fixed not-yet-paid one."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x14""qlBondNextCouponRate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x0E""qlBondNotional"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x0E""qlBondNotional"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x31""Returns the notional of the bond at a given date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0E""qlBondNotional"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlBondNotionals"),
            // parameter codes
            TempStrNoSize("\x04""PCP#"),
            // function display name
            TempStrNoSize("\x0F""qlBondNotionals"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x22""Returns the notionals of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0F""qlBondNotionals"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x1C""qlBondPreviousCashFlowAmount"),
            // parameter codes
            TempStrNoSize("\x05""PCPP#"),
            // function display name
            TempStrNoSize("\x1C""qlBondPreviousCashFlowAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x26""Returns the previous cash flow amount."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x1C""qlBondPreviousCashFlowAmount"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x1A""qlBondPreviousCashFlowDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x1A""qlBondPreviousCashFlowDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x24""Returns the previous cash flow date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x1A""qlBondPreviousCashFlowDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondPreviousCouponRate"),
            // parameter codes
            TempStrNoSize("\x05""ECPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondPreviousCouponRate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\xD8""Returns the previous coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the last paid one."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x18""qlBondPreviousCouponRate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondRedemptionAmount"),
            // parameter codes
            TempStrNoSize("\x04""PCP#"),
            // function display name
            TempStrNoSize("\x16""qlBondRedemptionAmount"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2A""Returns the redemption amount of the bond."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x16""qlBondRedemptionAmount"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondRedemptionDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x14""qlBondRedemptionDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x30""Returns the redemption payment date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x14""qlBondRedemptionDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x18""qlBondReferencePeriodEnd"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x18""qlBondReferencePeriodEnd"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x4F""Returns the reference period end date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x18""qlBondReferencePeriodEnd"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x1A""qlBondReferencePeriodStart"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x1A""qlBondReferencePeriodStart"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,SettlementDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x51""Returns the reference period start date for the current coupon of the given bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x1A""qlBondReferencePeriodStart"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x15""qlBondSetCouponPricer"),
            // parameter codes
            TempStrNoSize("\x05""LCCP#"),
            // function display name
            TempStrNoSize("\x15""qlBondSetCouponPricer"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x29""ObjectId,FloatingRateCouponPricer,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2F""Set the coupon pricer at the given Bond object."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x25""FloatingRate coupon pricer object ID."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x15""qlBondSetCouponPricer"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x16""qlBondSetCouponPricers"),
            // parameter codes
            TempStrNoSize("\x05""LCPP#"),
            // function display name
            TempStrNoSize("\x16""qlBondSetCouponPricers"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x29""ObjectId,FloatingRateCouponPricer,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x2F""Set the coupon pricer at the given Bond object."),
            // parameter descriptions
            TempStrNoSize("\x29""id of existing QuantLibAddin::Bond object"),
            TempStrNoSize("\x25""FloatingRate coupon pricer object ID."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x16""qlBondSetCouponPricers"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 13, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondSettlementDate"),
            // parameter codes
            TempStrNoSize("\x05""NCPP#"),
            // function display name
            TempStrNoSize("\x14""qlBondSettlementDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x1F""ObjectId,EvaluationDate,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x28""Returns the settlement date of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x73""The current global Settings::EvaluationDate is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x14""qlBondSettlementDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x14""qlBondSettlementDays"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x14""qlBondSettlementDays"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x32""Returns the number of settlement days of the bond."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x14""qlBondSettlementDays"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 12, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlBondStartDate"),
            // parameter codes
            TempStrNoSize("\x04""NCP#"),
            // function display name
            TempStrNoSize("\x0F""qlBondStartDate"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x10""ObjectId,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x46""Returns the start (i.e. first accrual) date for the given Bond object."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0F""qlBondStartDate"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 20, &xDll,
            // function code name
            TempStrNoSize("\x19""qlBondYieldFromCleanPrice"),
            // parameter codes
            TempStrNoSize("\x0C""ECEPPPPPPPP#"),
            // function display name
            TempStrNoSize("\x19""qlBondYieldFromCleanPrice"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x68""ObjectId,CleanPrice,DayCounter,Compounding,Frequency,SettlementDate,Accuracy,MaxIterations,Guess,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x60""Returns the yield for the given bond corresponding to the given clean price and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0C""clean price."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x23""tolerance. Default value = 1.0e-10."),
            TempStrNoSize("\x2E""max number of iterations. Default value = 100."),
            TempStrNoSize("\x1C""guess. Default value = 0.05."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x19""qlBondYieldFromCleanPrice"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 21, &xDll,
            // function code name
            TempStrNoSize("\x1B""qlBondZSpreadFromCleanPrice"),
            // parameter codes
            TempStrNoSize("\x0D""ECECPPPPPPPP#"),
            // function display name
            TempStrNoSize("\x1B""qlBondZSpreadFromCleanPrice"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x73""ObjectId,CleanPrice,YieldCurve,DayCounter,Compounding,Frequency,SettlementDate,Accuracy,MaxIterations,Guess,Trigger"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x63""Returns the z-spread for the given bond corresponding to the given clean price and settlement date."),
            // parameter descriptions
            TempStrNoSize("\x24""id of existing QuantLib::Bond object"),
            TempStrNoSize("\x0C""clean price."),
            TempStrNoSize("\x29""discounting YieldTermStructure object ID."),
            TempStrNoSize("\x3A""Yield DayCounter ID. Default value = Actual/Actual (ISDA)."),
            TempStrNoSize("\x71""Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded."),
            TempStrNoSize("\x68""frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual."),
            TempStrNoSize("\x68""The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date()."),
            TempStrNoSize("\x23""tolerance. Default value = 1.0e-10."),
            TempStrNoSize("\x2E""max number of iterations. Default value = 100."),
            TempStrNoSize("\x1B""guess. Default value = 0.0."),
            TempStrNoSize("\x1D""dependency tracking trigger  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x1B""qlBondZSpreadFromCleanPrice"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 30, &xDll,
            // function code name
            TempStrNoSize("\x0D""qlCmsRateBond"),
            // parameter codes
            TempStrNoSize("\x16""CCPCNPPCPPCPPCPPPPPPL#"),
            // function display name
            TempStrNoSize("\x0D""qlCmsRateBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\xC7""ObjectId,Description,Currency,SettlementDays,PaymentBDC,FaceAmount,ScheduleID,FixingDays,IsInArrears,DayCounter,Floors,Gearings,SwapIndex,Spreads,Caps,Redemption,IssueDate,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3A""Construct an object of class CmsRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x4A""fixing days (e.g. 2). Default value = QuantLib::Null<QuantLib::Natural>()."),
            TempStrNoSize("\x38""TRUE if the fixing is in arrears. Default value = false."),
            TempStrNoSize("\x16""Payment DayCounter ID."),
            TempStrNoSize("\x3D""floor strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x2C""floating rate gearings. Default value = 1.0."),
            TempStrNoSize("\x19""floating swap rate index."),
            TempStrNoSize("\x2B""floating rate spreads. Default value = 0.0."),
            TempStrNoSize("\x3B""cap strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x26""Redemption value. Default value = 100."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0D""qlCmsRateBond"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 25, &xDll,
            // function code name
            TempStrNoSize("\x0F""qlFixedRateBond"),
            // parameter codes
            TempStrNoSize("\x11""CCPCNPCPCPPPCPPL#"),
            // function display name
            TempStrNoSize("\x0F""qlFixedRateBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\xA1""ObjectId,Description,Currency,SettlementDays,FaceAmount,ScheduleID,Coupons,DayCounter,PaymentBDC,Redemption,IssueDate,PaymentCalendar,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3C""Construct an object of class FixedRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x27""simple annual compounding coupon rates."),
            TempStrNoSize("\x16""Payment DayCounter ID."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x28""Redemption value. Default value = 100.0."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x27""payment holiday calendar (e.g. TARGET)."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x0F""qlFixedRateBond"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 24, &xDll,
            // function code name
            TempStrNoSize("\x10""qlFixedRateBond2"),
            // parameter codes
            TempStrNoSize("\x10""CCPCNPCPPPPCPPL#"),
            // function display name
            TempStrNoSize("\x10""qlFixedRateBond2"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x96""ObjectId,Description,Currency,SettlementDays,FaceAmount,ScheduleID,Coupons,PaymentBDC,Redemption,IssueDate,PaymentCalendar,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3C""Construct an object of class FixedRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x18""coupon InterestRate IDs."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x28""Redemption value. Default value = 100.0."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x27""payment holiday calendar (e.g. TARGET)."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x10""qlFixedRateBond2"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 30, &xDll,
            // function code name
            TempStrNoSize("\x12""qlFloatingRateBond"),
            // parameter codes
            TempStrNoSize("\x16""CCPCNPPCPPCPPCPPPPPPL#"),
            // function display name
            TempStrNoSize("\x12""qlFloatingRateBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\xC7""ObjectId,Description,Currency,SettlementDays,PaymentBDC,FaceAmount,ScheduleID,FixingDays,IsInArrears,DayCounter,Floors,Gearings,IborIndex,Spreads,Caps,Redemption,IssueDate,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3F""Construct an object of class FloatingRateBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x13""Schedule object ID."),
            TempStrNoSize("\x4A""fixing days (e.g. 2). Default value = QuantLib::Null<QuantLib::Natural>()."),
            TempStrNoSize("\x38""TRUE if the fixing is in arrears. Default value = false."),
            TempStrNoSize("\x16""Payment DayCounter ID."),
            TempStrNoSize("\x3D""floor strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x2C""floating rate gearings. Default value = 1.0."),
            TempStrNoSize("\x14""floating rate index."),
            TempStrNoSize("\x2B""floating rate spreads. Default value = 0.0."),
            TempStrNoSize("\x3B""cap strikes. Default value = std::vector<QuantLib::Rate>()."),
            TempStrNoSize("\x26""Redemption value. Default value = 100."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x12""qlFloatingRateBond"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);

        Excel(xlfRegister, 0, 23, &xDll,
            // function code name
            TempStrNoSize("\x10""qlZeroCouponBond"),
            // parameter codes
            TempStrNoSize("\x0F""CCPCNCPPPPPPPL#"),
            // function display name
            TempStrNoSize("\x10""qlZeroCouponBond"),
            // comma-delimited list of parameter names
            TempStrNoSize("\x85""ObjectId,Description,Currency,SettlementDays,Calendar,FaceAmount,Maturity,PaymentBDC,Redemption,IssueDate,Permanent,Trigger,Overwrite"),
            // function type (0 = hidden, 1 = worksheet)
            TempStrNoSize("\x01""0"),
            // function category
            TempStrNoSize("\x14""QuantLib - Financial"),
            // shortcut text (command macros only)
            TempStrNoSize("\x00"""),
            // path to help file
            TempStrNoSize("\x00"""),
            // function description
            TempStrNoSize("\x3D""Construct an object of class ZeroCouponBond and return its id"),
            // parameter descriptions
            TempStrNoSize("\x1A""id of object to be created"),
            TempStrNoSize("\x4D""Bond description string. Autogenerated if null Default value = std::string()."),
            TempStrNoSize("\x0E""bond Currency."),
            TempStrNoSize("\x10""settlement days."),
            TempStrNoSize("\x1F""holiday calendar (e.g. TARGET)."),
            TempStrNoSize("\x2B""Face nominal amount. Default value = 100.0."),
            TempStrNoSize("\x0E""maturity date."),
            TempStrNoSize("\x3B""payment business day convention. Default value = Following."),
            TempStrNoSize("\x26""Redemption value. Default value = 100."),
            TempStrNoSize("\x52""issue date: the bond can't be traded until then. Default value = QuantLib::Date()."),
            TempStrNoSize("\x1D""object permanent/nonpermanent"),
            TempStrNoSize("\x1B""dependency tracking trigger"),
            TempStrNoSize("\x10""overwrite flag  "));

        Excel4(xlfRegisterId, &xlRegID, 2, &xDll,
            TempStrNoSize("\x10""qlZeroCouponBond"));
        Excel4(xlfUnregister, 0, 1, &xlRegID);



}

