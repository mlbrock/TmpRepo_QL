
/*  
 Copyright (C) 2004, 2005, 2006, 2007, 2008 Eric Ehlers
 Copyright (C) 2009 Roland Lichters
 
 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
*/

// This file was generated automatically by gensrc.py.  If you edit this file
// manually then your changes will be lost the next time gensrc runs.

// This source code file was generated from the following stub:
//      gensrc/gensrc/stubs/stub.calc.idlhead

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/uno/Exception.idl>
#include <com/sun/star/lang/XInitialization.idl>
#include <com/sun/star/lang/XServiceName.idl>
#include <com/sun/star/lang/XLocalizable.idl>
#include <com/sun/star/sheet/XAddIn.idl>

module quantlib {
  interface XCalcAddins {

                // logging

                sequence<sequence<any> > ohLogSetFile(
                        [in] any LogFileName,
                        [in] any LogLevel,
                        [in] any Trigger);

                sequence<sequence<any> > ohLogSetLevel(
                        [in] any LogLevel,
                        [in] any Trigger);

                // serialization

                sequence<sequence<any> > ohObjectLoad(
                        [in] any Directory,
                        [in] any Pattern,
                        [in] long Recurse,
                        [in] long Overwrite,
                        [in] any Trigger);

                sequence<sequence<any> > ohObjectSave(
                        [in] sequence<sequence<any> > ObjectList,
                        [in] any Filename,
                        [in] long Overwrite,
                        [in] long IncludeGroups,
                        [in] any Trigger);

                // accountingengines

                sequence<sequence<any> > qlAccountingEngine(
                        [in] any ObjectId,
                        [in] any MarketModelEvolver,
                        [in] any Product,
                        [in] any InitialNumeraireValue,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlAccountingEngineMultiplePathValues(
                        [in] any ObjectId,
                        [in] any SequenceStats,
                        [in] any Paths,
                        [in] any Trigger);

                // assetswap

                sequence<sequence<any> > qlAssetSwap(
                        [in] any ObjectId,
                        [in] long PayBondCoupon,
                        [in] any Bond,
                        [in] any CleanPrice,
                        [in] any IborIndex,
                        [in] any Spread,
                        [in] any FloatingLegSchedule,
                        [in] any FloatingLegDayCounter,
                        [in] long ParAssetSwap,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlAssetSwap2(
                        [in] any ObjectId,
                        [in] long ParAssetSwap,
                        [in] any Bond,
                        [in] any CleanPrice,
                        [in] any NonParRepayment,
                        [in] any Gearing,
                        [in] any IborIndex,
                        [in] any Spread,
                        [in] any FloatingLegDayCounter,
                        [in] any DealMaturity,
                        [in] long PayBondCoupon,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlAssetSwapFairCleanPrice(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlAssetSwapFairNonParRepayment(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlAssetSwapFairSpread(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlAssetSwapFloatingLegAnalysis(
                        [in] any ObjectId,
                        [in] any AfterDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlAssetSwapFloatingLegBPS(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlAssetSwapParSwap(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlAssetSwapPayBondCoupon(
                        [in] any ObjectId,
                        [in] any Trigger);

                // bonds

                sequence<sequence<any> > qlBond(
                        [in] any ObjectId,
                        [in] any Description,
                        [in] any Currency,
                        [in] any SettlementDays,
                        [in] any Calendar,
                        [in] any FaceAmount,
                        [in] any MaturityDate,
                        [in] any IssueDate,
                        [in] any LegID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlBondAccrualDays(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondAccrualEndDate(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondAccrualPeriod(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondAccrualStartDate(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondAccruedAmount(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondAccruedDays(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondAccruedPeriod(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondAtmRateFromYieldTermStructure(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any SettlementDate,
                        [in] any CleanPrice,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondBpsFromYield(
                        [in] any ObjectId,
                        [in] any Yield,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondBpsFromYieldTermStructure(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondCalendar(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondCleanPrice(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondCleanPriceFromYield(
                        [in] any ObjectId,
                        [in] any Yield,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondCleanPriceFromYieldTermStructure(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondCleanPriceFromZSpread(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any ZSpread,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondConvexityFromYield(
                        [in] any ObjectId,
                        [in] any Yield,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondCurrency(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondDescription(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondDirtyPriceFromYield(
                        [in] any ObjectId,
                        [in] any Yield,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondDurationFromYield(
                        [in] any ObjectId,
                        [in] any Yield,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any DurationType,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondFlowAnalysis(
                        [in] any ObjectId,
                        [in] any AfterDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondIsTradable(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondIssueDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondMaturityDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondNextCashFlowAmount(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondNextCashFlowDate(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondNextCouponRate(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondNotional(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondNotionals(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondPreviousCashFlowAmount(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondPreviousCashFlowDate(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondPreviousCouponRate(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondReferencePeriodEnd(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondReferencePeriodStart(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondSetCouponPricer(
                        [in] any ObjectId,
                        [in] any FloatingRateCouponPricer,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondSetCouponPricers(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > FloatingRateCouponPricer,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondSettlementDate(
                        [in] any ObjectId,
                        [in] any EvaluationDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondSettlementDays(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondStartDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondYieldFromCleanPrice(
                        [in] any ObjectId,
                        [in] any CleanPrice,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any SettlementDate,
                        [in] any Accuracy,
                        [in] any MaxIterations,
                        [in] any Guess,
                        [in] any Trigger);

                sequence<sequence<any> > qlBondZSpreadFromCleanPrice(
                        [in] any ObjectId,
                        [in] any CleanPrice,
                        [in] any YieldCurve,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] any SettlementDate,
                        [in] any Accuracy,
                        [in] any MaxIterations,
                        [in] any Guess,
                        [in] any Trigger);

                sequence<sequence<any> > qlCmsRateBond(
                        [in] any ObjectId,
                        [in] any Description,
                        [in] any Currency,
                        [in] any SettlementDays,
                        [in] any PaymentBDC,
                        [in] any FaceAmount,
                        [in] any ScheduleID,
                        [in] any FixingDays,
                        [in] long IsInArrears,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Floors,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any SwapIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > Caps,
                        [in] any Redemption,
                        [in] any IssueDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFixedRateBond(
                        [in] any ObjectId,
                        [in] any Description,
                        [in] any Currency,
                        [in] any SettlementDays,
                        [in] any FaceAmount,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > Coupons,
                        [in] any DayCounter,
                        [in] any PaymentBDC,
                        [in] any Redemption,
                        [in] any IssueDate,
                        [in] any PaymentCalendar,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFixedRateBond2(
                        [in] any ObjectId,
                        [in] any Description,
                        [in] any Currency,
                        [in] any SettlementDays,
                        [in] any FaceAmount,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > Coupons,
                        [in] any PaymentBDC,
                        [in] any Redemption,
                        [in] any IssueDate,
                        [in] any PaymentCalendar,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFloatingRateBond(
                        [in] any ObjectId,
                        [in] any Description,
                        [in] any Currency,
                        [in] any SettlementDays,
                        [in] any PaymentBDC,
                        [in] any FaceAmount,
                        [in] any ScheduleID,
                        [in] any FixingDays,
                        [in] long IsInArrears,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Floors,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any IborIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > Caps,
                        [in] any Redemption,
                        [in] any IssueDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlZeroCouponBond(
                        [in] any ObjectId,
                        [in] any Description,
                        [in] any Currency,
                        [in] any SettlementDays,
                        [in] any Calendar,
                        [in] any FaceAmount,
                        [in] any Maturity,
                        [in] any PaymentBDC,
                        [in] any Redemption,
                        [in] any IssueDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // browniangenerators

                sequence<sequence<any> > qlMTBrownianGeneratorFactory(
                        [in] any ObjectId,
                        [in] any Seed,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // calendar

                sequence<sequence<any> > qlCalendarAddHoliday(
                        [in] any calendar,
                        [in] any Date,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarAdjust(
                        [in] any calendar,
                        [in] sequence<sequence<any> > Date,
                        [in] any BusinessDayConvention,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarBusinessDaysBetween(
                        [in] any calendar,
                        [in] sequence<sequence<any> > FirstDate,
                        [in] any LastDate,
                        [in] long IncludeFirst,
                        [in] long IncludeLast,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarEndOfMonth(
                        [in] any calendar,
                        [in] sequence<sequence<any> > Date,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarHolidayList(
                        [in] any Calendar,
                        [in] any FromDate,
                        [in] any ToDate,
                        [in] long IncludeWeekEnds,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarIsBusinessDay(
                        [in] any calendar,
                        [in] sequence<sequence<any> > Date,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarIsEndOfMonth(
                        [in] any calendar,
                        [in] sequence<sequence<any> > Date,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarIsHoliday(
                        [in] any calendar,
                        [in] sequence<sequence<any> > Date,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarName(
                        [in] any calendar,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalendarRemoveHoliday(
                        [in] any calendar,
                        [in] any Date,
                        [in] any Trigger);

                // calibrationhelpers

                sequence<sequence<any> > qlCalibrationHelperImpliedVolatility(
                        [in] any ObjectId,
                        [in] any TargetValue,
                        [in] any Accuracy,
                        [in] any MaxEvaluations,
                        [in] any MinVol,
                        [in] any MaxVol,
                        [in] any Trigger);

                sequence<sequence<any> > qlCalibrationHelperSetPricingEngine(
                        [in] any ObjectId,
                        [in] any PricingEngine,
                        [in] any Trigger);

                sequence<sequence<any> > qlModelG2Calibrate(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > CalibrationHelpers,
                        [in] any Method,
                        [in] any EndCriteria,
                        [in] any Constraint,
                        [in] sequence<sequence<any> > Weights,
                        [in] sequence<sequence<long> > FixedCoeff,
                        [in] any Trigger);

                sequence<sequence<any> > qlOneFactorAffineModelCalibrate(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > CalibrationHelpers,
                        [in] any Method,
                        [in] any EndCriteria,
                        [in] any Constraint,
                        [in] sequence<sequence<any> > Weights,
                        [in] sequence<sequence<long> > FixedCoeff,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwaptionHelper(
                        [in] any ObjectId,
                        [in] any OptionTenor,
                        [in] any Length,
                        [in] any Volatility,
                        [in] any IborIndex,
                        [in] any FixedLegTenor,
                        [in] any FixedLegDayCounter,
                        [in] any FloatingLegDayCounter,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSwaptionHelperModelValue(
                        [in] any ObjectId,
                        [in] any Trigger);

                // capfloor

                sequence<sequence<any> > qlCapFloor(
                        [in] any ObjectId,
                        [in] any OptionType,
                        [in] any LegID,
                        [in] sequence<sequence<any> > Strikes,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlCapFloorMaturityDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlCapFloorStartDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMakeCapFloor(
                        [in] any ObjectId,
                        [in] any OptionType,
                        [in] any Length,
                        [in] any IborIndex,
                        [in] any Strike,
                        [in] any ForwardStart,
                        [in] any PricingEngineID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // capletvolstructure

                sequence<sequence<any> > qlConstantOptionletVolatility(
                        [in] any ObjectId,
                        [in] any NDays,
                        [in] any Calendar,
                        [in] any BusinessDayConvention,
                        [in] any Volatility,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRelinkableHandleOptionletVolatilityStructure(
                        [in] any ObjectId,
                        [in] any CurrentLink,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // correlation

                sequence<sequence<any> > qlCotSwapFromFwdCorrelation(
                        [in] any ObjectId,
                        [in] any FwdCorr,
                        [in] any CurveState,
                        [in] any Displacement,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlExponentialCorrelations(
                        [in] sequence<sequence<any> > RateTimes,
                        [in] any LongTermCorr,
                        [in] any Beta,
                        [in] any Gamma,
                        [in] any Time,
                        [in] any Trigger);

                sequence<sequence<any> > qlExponentialForwardCorrelation(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > RateTimes,
                        [in] any LongTermCorr,
                        [in] any Beta,
                        [in] any Gamma,
                        [in] sequence<sequence<any> > Times,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMarketModelLmLinearExponentialCorrelationModel(
                        [in] any ObjectId,
                        [in] any Size,
                        [in] any Rho,
                        [in] any Beta,
                        [in] any Factors,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlPiecewiseConstantCorrelationCorrelation(
                        [in] any ObjectId,
                        [in] any TimeIndex,
                        [in] any Trigger);

                sequence<sequence<any> > qlPiecewiseConstantCorrelationNumberOfRates(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlPiecewiseConstantCorrelationTimes(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlTimeHomogeneousForwardCorrelation(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > FwdCorrMatrix,
                        [in] sequence<sequence<any> > RateTimes,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // couponvectors

                sequence<sequence<any> > qlCmsCouponPricer(
                        [in] any ObjectId,
                        [in] any Volatility,
                        [in] any CmsCouponPricerType,
                        [in] any YieldCurveModel,
                        [in] any MeanReversion,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlCmsLeg(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > FixingDays,
                        [in] long IsInArrears,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Floors,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any SwapIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > Caps,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlCmsZeroLeg(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > FixingDays,
                        [in] long IsInArrears,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Floors,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any SwapIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > Caps,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlConundrumPricerByNumericalIntegration(
                        [in] any ObjectId,
                        [in] any SwaptionVol,
                        [in] any YieldCurveModel,
                        [in] any MeanReversion,
                        [in] any LowerLimit,
                        [in] any UpperLimit,
                        [in] any Precision,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlDigitalCmsLeg(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > FixingDays,
                        [in] long IsInArrears,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any SwapIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > CallStrikes,
                        [in] any CallSpecs,
                        [in] sequence<sequence<any> > CallPayoff,
                        [in] sequence<sequence<any> > PutStrikes,
                        [in] any PutSpecs,
                        [in] sequence<sequence<any> > PutPayoff,
                        [in] any Replication,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlDigitalIborLeg(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > FixingDays,
                        [in] long IsInArrears,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any IborIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > CallStrikes,
                        [in] any CallSpecs,
                        [in] sequence<sequence<any> > CallPayoff,
                        [in] sequence<sequence<any> > PutStrikes,
                        [in] any PutSpecs,
                        [in] sequence<sequence<any> > PutPayoff,
                        [in] any Replication,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFixedRateLeg(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > Coupons,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFixedRateLeg2(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > Coupons,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlIborCouponPricer(
                        [in] any ObjectId,
                        [in] any Volatility,
                        [in] any IborCouponPricerType,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlIborLeg(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > FixingDays,
                        [in] long IsInArrears,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Floors,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any IborIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > Caps,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRangeAccrualLeg(
                        [in] any ObjectId,
                        [in] any PaymentBDC,
                        [in] sequence<sequence<any> > Nominals,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > FixingDays,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > LowerStrikes,
                        [in] sequence<sequence<any> > Gearings,
                        [in] any IborIndex,
                        [in] sequence<sequence<any> > Spreads,
                        [in] sequence<sequence<any> > UpperStrikes,
                        [in] any ObservationsTenor,
                        [in] any ObservationsBDC,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // credit

                sequence<sequence<any> > qlBlackCdsOptionEngine(
                        [in] any ObjectId,
                        [in] any DefaultCurve,
                        [in] any RecoveryRate,
                        [in] any YieldCurve,
                        [in] any BlackVol,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlCDSOption(
                        [in] any ObjectId,
                        [in] any UnderlyingCDS,
                        [in] any Exercise,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlCreditDefaultSwap(
                        [in] any ObjectId,
                        [in] any BuyerSeller,
                        [in] any Notional,
                        [in] any Upfront,
                        [in] any Spread,
                        [in] any PremiumSchedule,
                        [in] any PaymentConvention,
                        [in] any DayCounter,
                        [in] long SettlesAccrual,
                        [in] long PayAtDefault,
                        [in] any ProtectionStart,
                        [in] any UpfrontDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlHazardRateCurve(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > CurveDates,
                        [in] sequence<sequence<any> > CurveRates,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMidPointCdsEngine(
                        [in] any ObjectId,
                        [in] any DefaultCurve,
                        [in] any RecoveryRate,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlPiecewiseFlatForwardCurve(
                        [in] any ObjectId,
                        [in] any ReferenceDate,
                        [in] sequence<sequence<any> > RateHelpers,
                        [in] any DayCounter,
                        [in] any Accuracy,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlPiecewiseHazardRateCurve(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > Helpers,
                        [in] any DayCounter,
                        [in] any Calendar,
                        [in] any Interpolation,
                        [in] any Accuracy,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRiskyFixedBond(
                        [in] any ObjectId,
                        [in] any Bondname,
                        [in] any Currency,
                        [in] any Recovery,
                        [in] any DefaultCurve,
                        [in] any Schedule,
                        [in] any Rate,
                        [in] any DayCounter,
                        [in] any PaymentConvention,
                        [in] any Notional,
                        [in] any DiscountingCurve,
                        [in] any PricingDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSpreadCdsHelper(
                        [in] any ObjectId,
                        [in] any RunningSpread,
                        [in] any Tenor,
                        [in] any SettlementDays,
                        [in] any Calendar,
                        [in] any Frequency,
                        [in] any PaymentConvention,
                        [in] any GenRule,
                        [in] any DayCounter,
                        [in] any RecoveryRate,
                        [in] any DiscountingCurve,
                        [in] long SettleAccrual,
                        [in] long PayAtDefault,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlUpfrontCdsHelper(
                        [in] any ObjectId,
                        [in] any UpfrontSpread,
                        [in] any RunningSpread,
                        [in] any Tenor,
                        [in] any SettlementDays,
                        [in] any Calendar,
                        [in] any Frequency,
                        [in] any PaymentConvention,
                        [in] any GenRule,
                        [in] any DayCounter,
                        [in] any RecRate,
                        [in] any DiscCurve,
                        [in] any UpfSettlDays,
                        [in] long SettlAccr,
                        [in] long PayAtDefault,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // daycounter

                sequence<sequence<any> > qlDayCounterDayCount(
                        [in] any daycounter,
                        [in] any StartDate,
                        [in] sequence<sequence<any> > EndDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlDayCounterName(
                        [in] any daycounter,
                        [in] any Trigger);

                sequence<sequence<any> > qlDayCounterYearFraction(
                        [in] any daycounter,
                        [in] any StartDate,
                        [in] sequence<sequence<any> > EndDate,
                        [in] any RefPeriodStart,
                        [in] any RefPeriodEnd,
                        [in] any Trigger);

                // defaultbasket

                sequence<sequence<any> > qlCreditBasket(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > IssuerNames,
                        [in] sequence<sequence<any> > Issuers,
                        [in] sequence<sequence<any> > Notionals,
                        [in] any ReferenceDate,
                        [in] any AttachmentRatio,
                        [in] any DettachmentRatio,
                        [in] long Amortizing,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // defaulttermstructures

                sequence<sequence<any> > qlDefaultTSDefaultProbability(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > Dates,
                        [in] long AllowExtrapolation,
                        [in] any Trigger);

                sequence<sequence<any> > qlFlatHazardRate(
                        [in] any ObjectId,
                        [in] any NDays,
                        [in] any Calendar,
                        [in] any Rate,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRelinkableHandleDefaultProbabilityTermStructure(
                        [in] any ObjectId,
                        [in] any CurrentLink,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // evolutiondescription

                sequence<sequence<any> > qlEvolutionDescription(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > RateTimes,
                        [in] sequence<sequence<any> > EvolutionTimes,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlEvolutionDescriptionEvolutionTimes(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlEvolutionDescriptionFirstAliveRate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlEvolutionDescriptionFromProduct(
                        [in] any ObjectId,
                        [in] any Product,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlEvolutionDescriptionNumberOfRates(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlEvolutionDescriptionNumberOfSteps(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlEvolutionDescriptionRateTimes(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlIsInMoneyMarketMeasure(
                        [in] any EvolutionDescription,
                        [in] sequence<sequence<any> > Numeraires,
                        [in] any Trigger);

                sequence<sequence<any> > qlIsInMoneyMarketPlusMeasure(
                        [in] any EvolutionDescription,
                        [in] sequence<sequence<any> > Numeraires,
                        [in] any Offset,
                        [in] any Trigger);

                sequence<sequence<any> > qlIsInTerminalMeasure(
                        [in] any EvolutionDescription,
                        [in] sequence<sequence<any> > Numeraires,
                        [in] any Trigger);

                sequence<sequence<any> > qlMoneyMarketMeasure(
                        [in] any EvolutionDescription,
                        [in] any Trigger);

                sequence<sequence<any> > qlMoneyMarketPlusMeasure(
                        [in] any EvolutionDescription,
                        [in] any Offset,
                        [in] any Trigger);

                sequence<sequence<any> > qlTerminalMeasure(
                        [in] any EvolutionDescription,
                        [in] any Trigger);

                // exercise

                sequence<sequence<any> > qlEuropeanExercise(
                        [in] any ObjectId,
                        [in] any ExpiryDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // index

                sequence<sequence<any> > qlBMAIndex(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlEonia(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlEuribor(
                        [in] any ObjectId,
                        [in] any Tenor,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlEuribor365(
                        [in] any ObjectId,
                        [in] any Tenor,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlEuriborSwap(
                        [in] any ObjectId,
                        [in] any FixingType,
                        [in] any Tenor,
                        [in] any FwdCurve,
                        [in] any DiscCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlEuriborSwapIsdaFixA(
                        [in] any ObjectId,
                        [in] any Tenor,
                        [in] any FwdCurve,
                        [in] any DiscCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlIborIndex(
                        [in] any ObjectId,
                        [in] any FamilyName,
                        [in] any Tenor,
                        [in] any FixingDays,
                        [in] any Currency,
                        [in] any Calendar,
                        [in] any BDayConvention,
                        [in] long EndOfMonth,
                        [in] any DayCounter,
                        [in] any FwdCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlIndexAddFixings(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > FixingDates,
                        [in] sequence<sequence<any> > FixingValues,
                        [in] long ForceOverwrite,
                        [in] any Trigger);

                sequence<sequence<any> > qlIndexClearFixings(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlIndexName(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlLibor(
                        [in] any ObjectId,
                        [in] any Currency,
                        [in] any Tenor,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlLiborSwap(
                        [in] any ObjectId,
                        [in] any Currency,
                        [in] any FixingType,
                        [in] any Tenor,
                        [in] any FwdCurve,
                        [in] any DiscCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlOvernightIndex(
                        [in] any ObjectId,
                        [in] any FamilyName,
                        [in] any FixingDays,
                        [in] any Currency,
                        [in] any Calendar,
                        [in] any DayCounter,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSonia(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSwapIndex(
                        [in] any ObjectId,
                        [in] any FamilyName,
                        [in] any Tenor,
                        [in] any FixingDays,
                        [in] any Currency,
                        [in] any Calendar,
                        [in] any FixedLegTenor,
                        [in] any FixedLegBDC,
                        [in] any FixedLegDayCounter,
                        [in] any IborIndex,
                        [in] any DiscCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // instruments

                sequence<sequence<any> > qlInstrumentNPV(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlInstrumentSetPricingEngine(
                        [in] any ObjectId,
                        [in] any PricingEngine,
                        [in] any Trigger);

                sequence<sequence<any> > qlInstrumentValuationDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                // interpolation

                sequence<sequence<any> > qlCubicInterpolation(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > XArray,
                        [in] sequence<sequence<any> > YArray,
                        [in] any DerApprox,
                        [in] long Monotonic,
                        [in] any LeftConditionType,
                        [in] any LeftConditionValue,
                        [in] any RightConditionType,
                        [in] any RightConditionValue,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlInterpolation(
                        [in] any ObjectId,
                        [in] any InterpolationType,
                        [in] sequence<sequence<any> > XArray,
                        [in] sequence<sequence<any> > YArray,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlInterpolationInterpolate(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > XValues,
                        [in] long AllowExtrapolation,
                        [in] any Trigger);

                // latentmodels

                sequence<sequence<any> > qlGaussianDefaultProbLM(
                        [in] any ObjectId,
                        [in] any Basket,
                        [in] sequence<sequence<any> > Factors,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // leg

                sequence<sequence<any> > qlInterestRate(
                        [in] any ObjectId,
                        [in] any Rate,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlInterestRateCompoundFactor(
                        [in] any ObjectId,
                        [in] any StartDate,
                        [in] any EndDate,
                        [in] any RefPeriodStart,
                        [in] any RefPeriodEnd,
                        [in] any Trigger);

                sequence<sequence<any> > qlInterestRateCompounding(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlInterestRateDayCounter(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlInterestRateDiscountFactor(
                        [in] any ObjectId,
                        [in] any StartDate,
                        [in] any EndDate,
                        [in] any RefPeriodStart,
                        [in] any RefPeriodEnd,
                        [in] any Trigger);

                sequence<sequence<any> > qlInterestRateFrequency(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlInterestRateRate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlLeg(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > Amounts,
                        [in] sequence<sequence<any> > Dates,
                        [in] long ToBeSorted,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlLegFromCapFloor(
                        [in] any ObjectId,
                        [in] any CapFloor,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlLegFromSwap(
                        [in] any ObjectId,
                        [in] any Swap,
                        [in] any LegNumber,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // marketmodelevolvers

                sequence<sequence<any> > qlForwardRateIpc(
                        [in] any ObjectId,
                        [in] any MarketModel,
                        [in] any BrownianGeneratorFactory,
                        [in] sequence<sequence<any> > Numeraires,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlForwardRateNormalPc(
                        [in] any ObjectId,
                        [in] any MarketModel,
                        [in] any BrownianGeneratorFactory,
                        [in] sequence<sequence<any> > Numeraires,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlForwardRatePc(
                        [in] any ObjectId,
                        [in] any MarketModel,
                        [in] any BrownianGeneratorFactory,
                        [in] sequence<sequence<any> > Numeraires,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMarketModelEvolverAdvanceStep(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelEvolverCurrentStep(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelEvolverNumeraires(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelEvolverStartNewPath(
                        [in] any ObjectId,
                        [in] any Trigger);

                // marketmodels

                sequence<sequence<any> > qlAbcdVol(
                        [in] any ObjectId,
                        [in] any A,
                        [in] any B,
                        [in] any C,
                        [in] any D,
                        [in] sequence<sequence<any> > Ks,
                        [in] any Correlations,
                        [in] any EvolutionDescription,
                        [in] any Factors,
                        [in] sequence<sequence<any> > InitialRates,
                        [in] sequence<sequence<any> > Displacements,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlAnnuity(
                        [in] any CurveState,
                        [in] any StartIndex,
                        [in] any EndIndex,
                        [in] any NumeraireIndex,
                        [in] any Trigger);

                sequence<sequence<any> > qlCmSwapForwardJacobian(
                        [in] any CurveState,
                        [in] any SpanningForwards,
                        [in] any Trigger);

                sequence<sequence<any> > qlCmSwapZedMatrix(
                        [in] any CurveState,
                        [in] any SpanningForwards,
                        [in] any Displacement,
                        [in] any Trigger);

                sequence<sequence<any> > qlCoinitialSwapForwardJacobian(
                        [in] any CurveState,
                        [in] any Trigger);

                sequence<sequence<any> > qlCoinitialSwapZedMatrix(
                        [in] any CurveState,
                        [in] any Displacement,
                        [in] any Trigger);

                sequence<sequence<any> > qlCotSwapToFwdAdapter(
                        [in] any ObjectId,
                        [in] any CoterminalModel,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlCoterminalSwapForwardJacobian(
                        [in] any CurveState,
                        [in] any Trigger);

                sequence<sequence<any> > qlCoterminalSwapZedMatrix(
                        [in] any CurveState,
                        [in] any Displacement,
                        [in] any Trigger);

                sequence<sequence<any> > qlFlatVol(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > Volatilities,
                        [in] any Correlations,
                        [in] any EvolutionDescription,
                        [in] any Factors,
                        [in] sequence<sequence<any> > InitialRates,
                        [in] sequence<sequence<any> > Displacements,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFlatVolFactory(
                        [in] any ObjectId,
                        [in] any LongTermCorr,
                        [in] any Beta,
                        [in] sequence<sequence<any> > Times,
                        [in] sequence<sequence<any> > Volatilities,
                        [in] any YieldCurve,
                        [in] any Displacement,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFwdPeriodAdapter(
                        [in] any ObjectId,
                        [in] any LargeModel,
                        [in] any Period,
                        [in] any Offset,
                        [in] sequence<sequence<any> > Displacements,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFwdToCotSwapAdapter(
                        [in] any ObjectId,
                        [in] any ForwardModel,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMarketModelCovariance(
                        [in] any ObjectId,
                        [in] any Index,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelDisplacements(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelInitialRates(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelNumberOfFactors(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelNumberOfRates(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelNumberOfSteps(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelPseudoRoot(
                        [in] any ObjectId,
                        [in] any Index,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelTimeDependentVolatility(
                        [in] any ObjectId,
                        [in] any Index,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelTotalCovariance(
                        [in] any ObjectId,
                        [in] any Index,
                        [in] any Trigger);

                sequence<sequence<any> > qlPseudoRootFacade(
                        [in] any ObjectId,
                        [in] any Calibrator,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRateInstVolDifferences(
                        [in] any MarketModel1,
                        [in] any MarketModel2,
                        [in] any Index,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateVolDifferences(
                        [in] any MarketModel1,
                        [in] any MarketModel2,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwapDerivative(
                        [in] any CurveState,
                        [in] any StartIndex,
                        [in] any EndIndex,
                        [in] any FwdRateIndex,
                        [in] any Trigger);

                // options

                sequence<sequence<any> > qlDividendVanillaOption(
                        [in] any ObjectId,
                        [in] any Payoff,
                        [in] any Exercise,
                        [in] sequence<sequence<any> > DividendDates,
                        [in] sequence<sequence<any> > Dividends,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlVanillaOption(
                        [in] any ObjectId,
                        [in] any Payoff,
                        [in] any Exercise,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // payoffs

                sequence<sequence<any> > qlStrikedTypePayoff(
                        [in] any ObjectId,
                        [in] any PayoffID,
                        [in] any OptionType,
                        [in] any Strike,
                        [in] any ThirdParameter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // piecewiseyieldcurve

                sequence<sequence<any> > qlPiecewiseYieldCurve(
                        [in] any ObjectId,
                        [in] any NDays,
                        [in] any Calendar,
                        [in] sequence<sequence<any> > RateHelpers,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Jumps,
                        [in] sequence<sequence<any> > JumpDates,
                        [in] any Accuracy,
                        [in] any TraitsID,
                        [in] any InterpolatorID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // pricingengines

                sequence<sequence<any> > qlAnalyticCapFloorEngine(
                        [in] any ObjectId,
                        [in] any HandleModel,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlBinomialPricingEngine(
                        [in] any ObjectId,
                        [in] any EngineID,
                        [in] any ProcessID,
                        [in] any TimeSteps,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlBlackCapFloorEngine(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any VolTS,
                        [in] any Displacement,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlBlackCapFloorEngine2(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any Vol,
                        [in] any Displacement,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlBlackSwaptionEngine(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any VolTS,
                        [in] any Displacement,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlBlackSwaptionEngine2(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any Vol,
                        [in] any Displacement,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlBondEngine(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlDiscountingSwapEngine(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] long IncludeSettlDate,
                        [in] any SettlementDate,
                        [in] any NpvDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlJamshidianSwaptionEngine(
                        [in] any ObjectId,
                        [in] any Model,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlModelG2SwaptionEngine(
                        [in] any ObjectId,
                        [in] any Model,
                        [in] any Range,
                        [in] any Intervals,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlPricingEngine(
                        [in] any ObjectId,
                        [in] any EngineID,
                        [in] any ProcessID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlTreeSwaptionEngine(
                        [in] any ObjectId,
                        [in] any Model,
                        [in] any Nsteps,
                        [in] any YieldCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // processes

                sequence<sequence<any> > qlGeneralizedBlackScholesProcess(
                        [in] any ObjectId,
                        [in] any BlackVolID,
                        [in] any Underlying,
                        [in] any DayCounter,
                        [in] any SettlementDate,
                        [in] any RiskFreeRate,
                        [in] any DividendYield,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // products

                sequence<sequence<any> > qlMarketModelMultiProductComposite(
                        [in] any ObjectId,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMarketModelMultiProductCompositeAdd(
                        [in] any ObjectId,
                        [in] any Product,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelMultiProductCompositeFinalize(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelMultiProductMaxNumberOfCashFlowsPerProductPerStep(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelMultiProductNumberOfProducts(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelMultiProductPossibleCashFlowTimes(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelMultiProductSuggestedNumeraires(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlMarketModelMultiStepRatchet(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > RateTimes,
                        [in] sequence<sequence<any> > Accruals,
                        [in] sequence<sequence<any> > PaymentTimes,
                        [in] any GearingOfFloor,
                        [in] any GearingOfFixing,
                        [in] any SpreadOfFloor,
                        [in] any SpreadOfFixing,
                        [in] any InitialFloor,
                        [in] long Payer,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMarketModelOneStepForwards(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > RateTimes,
                        [in] sequence<sequence<any> > Accruals,
                        [in] sequence<sequence<any> > PaymentTimes,
                        [in] sequence<sequence<any> > Strikes,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMarketModelOneStepOptionlets(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > RateTimes,
                        [in] sequence<sequence<any> > Accruals,
                        [in] sequence<sequence<any> > PaymentTimes,
                        [in] sequence<sequence<any> > Payoffs,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // quotes

                sequence<sequence<any> > qlQuoteIsValid(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlQuoteValue(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRelinkableHandleQuote(
                        [in] any ObjectId,
                        [in] any CurrentLink,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSimpleQuote(
                        [in] any ObjectId,
                        [in] any Value,
                        [in] any TickValue,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSimpleQuoteReset(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSimpleQuoteSetValue(
                        [in] any ObjectId,
                        [in] any Value,
                        [in] any Trigger);

                // randomsequencegenerator

                sequence<sequence<any> > qlFaureRsg(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlHaltonRsg(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] any Seed,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMersenneTwisterRsg(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] any Seed,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRand(
                        [in] any Trigger);

                sequence<sequence<any> > qlRandomize(
                        [in] any Seed,
                        [in] any Trigger);

                sequence<sequence<any> > qlSobolRsg(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] any Seed,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlVariates(
                        [in] any ObjectId,
                        [in] any Samples,
                        [in] any Trigger);

                // rangeaccrual

                sequence<sequence<any> > qlRangeAccrualFloatersCoupon(
                        [in] any ObjectId,
                        [in] any Nominal,
                        [in] any PaymentDate,
                        [in] any IborIndex,
                        [in] any StartDate,
                        [in] any EndDate,
                        [in] any FixingDays,
                        [in] any DayCountID,
                        [in] any Gearings,
                        [in] any Spreads,
                        [in] any RefPeriodStart,
                        [in] any RefPeriodEnd,
                        [in] any ObserSchedID,
                        [in] any LowerTrigger,
                        [in] any UpperTrigger,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRangeAccrualFloatersCouponEndDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRangeAccrualFloatersCouponFromLeg(
                        [in] any ObjectId,
                        [in] any RangeAccrualLeg,
                        [in] any Position,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRangeAccrualFloatersCouponObservationDates(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRangeAccrualFloatersCouponObservationsNo(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRangeAccrualFloatersCouponSetPricer(
                        [in] any ObjectId,
                        [in] any RangeAccrualPricer,
                        [in] any Trigger);

                sequence<sequence<any> > qlRangeAccrualFloatersCouponStarDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRangeAccrualFloatersPrice(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any Trigger);

                sequence<sequence<any> > qlRangeAccrualPricerByBgm(
                        [in] any ObjectId,
                        [in] any Correlation,
                        [in] any SmileOnStartDateID,
                        [in] any SmileOnEndDateID,
                        [in] long WithSmile,
                        [in] long ByCallSpread,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSimpleFloaterPrice(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any Trigger);

                // ratehelpers

                sequence<sequence<any> > qlBondHelper(
                        [in] any ObjectId,
                        [in] any Price,
                        [in] any Bond,
                        [in] long UseCleanPrice,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlDatedOISRateHelper(
                        [in] any ObjectId,
                        [in] any StartDate,
                        [in] any EndDate,
                        [in] any FixedRate,
                        [in] any ONIndex,
                        [in] any DiscountingCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlDepositRateHelper(
                        [in] any ObjectId,
                        [in] any Rate,
                        [in] any IborIndex,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlDepositRateHelper2(
                        [in] any ObjectId,
                        [in] any Rate,
                        [in] any Tenor,
                        [in] any FixingDays,
                        [in] any Calendar,
                        [in] any Convention,
                        [in] long EndOfMonth,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFixedRateBondHelper(
                        [in] any ObjectId,
                        [in] any Price,
                        [in] any SettlementDays,
                        [in] any FaceAmount,
                        [in] any ScheduleID,
                        [in] sequence<sequence<any> > Coupons,
                        [in] any DayCounter,
                        [in] any PaymentBDC,
                        [in] any Redemption,
                        [in] any IssueDate,
                        [in] any PaymentCalendar,
                        [in] any ExCouponPeriod,
                        [in] any ExCouponCalendar,
                        [in] any ExCouponBDC,
                        [in] long ExCouponEndOfMonth,
                        [in] long UseCleanPrice,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFraRateHelper(
                        [in] any ObjectId,
                        [in] any Rate,
                        [in] any PeriodToStart,
                        [in] any IborIndex,
                        [in] any PillarDate,
                        [in] any CustomPillarDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFraRateHelper2(
                        [in] any ObjectId,
                        [in] any Rate,
                        [in] any PeriodToStart,
                        [in] any LengthInMonths,
                        [in] any FixingDays,
                        [in] any Calendar,
                        [in] any Convention,
                        [in] long EndOfMonth,
                        [in] any DayCounter,
                        [in] any PillarDate,
                        [in] any CustomPillarDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFuturesRateHelper(
                        [in] any ObjectId,
                        [in] any Price,
                        [in] any FuturesType,
                        [in] any FuturesDate,
                        [in] any IborIndex,
                        [in] any ConvexityAdjQuote,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFuturesRateHelper2(
                        [in] any ObjectId,
                        [in] any Price,
                        [in] any FuturesType,
                        [in] any FuturesDate,
                        [in] any LengthInMonths,
                        [in] any Calendar,
                        [in] any Convention,
                        [in] long EndOfMonth,
                        [in] any DayCounter,
                        [in] any ConvexityAdjQuote,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFuturesRateHelper3(
                        [in] any ObjectId,
                        [in] any Price,
                        [in] any FuturesType,
                        [in] any FuturesDate,
                        [in] any EndDate,
                        [in] any DayCounter,
                        [in] any ConvexityAdjQuote,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFxSwapRateHelper(
                        [in] any ObjectId,
                        [in] any FwdPoint,
                        [in] any SpotFx,
                        [in] any Tenor,
                        [in] any FixingDays,
                        [in] any Calendar,
                        [in] any Convention,
                        [in] long EndOfMonth,
                        [in] long IsFxBaseCurrencyCollateralCurrency,
                        [in] any CollateralCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlOISRateHelper(
                        [in] any ObjectId,
                        [in] any SettlDays,
                        [in] any Tenor,
                        [in] any FixedRate,
                        [in] any ONIndex,
                        [in] any DiscountingCurve,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRateHelperEarliestDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateHelperImpliedQuote(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateHelperLatestRelevantDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateHelperMaturityDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateHelperPillarDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateHelperQuoteIsValid(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateHelperQuoteName(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlRateHelperQuoteValue(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwapRateHelper(
                        [in] any ObjectId,
                        [in] any Rate,
                        [in] any SwapIndex,
                        [in] any Spread,
                        [in] any ForwardStart,
                        [in] any DiscountingCurve,
                        [in] any PillarDate,
                        [in] any CustomPillarDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSwapRateHelper2(
                        [in] any ObjectId,
                        [in] any Rate,
                        [in] any SettlDays,
                        [in] any Tenor,
                        [in] any Calendar,
                        [in] any FixedLegFrequency,
                        [in] any FixedLegConvention,
                        [in] any FixedLegDayCounter,
                        [in] any IborIndex,
                        [in] any Spread,
                        [in] any ForwardStart,
                        [in] any DiscountingCurve,
                        [in] any PillarDate,
                        [in] any CustomPillarDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // schedule

                sequence<sequence<any> > qlSchedule(
                        [in] any ObjectId,
                        [in] any EffectiveDate,
                        [in] any TerminationDate,
                        [in] any Tenor,
                        [in] any Calendar,
                        [in] any Convention,
                        [in] any TermDateConv,
                        [in] any GenRule,
                        [in] long EndOfMonth,
                        [in] any FirstDate,
                        [in] any NextToLastDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlScheduleBDC(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleCalendar(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleDates(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleEmpty(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleEndDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleEndOfMonth(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleFromDateVector(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > EffectiveDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlScheduleIsRegular(
                        [in] any ObjectId,
                        [in] any Index,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleNextDate(
                        [in] any ObjectId,
                        [in] any RefDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlSchedulePreviousDate(
                        [in] any ObjectId,
                        [in] any RefDate,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleRule(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleSize(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleStartDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleTenor(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleTerminationDateBDC(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlScheduleTruncated(
                        [in] any ObjectId,
                        [in] any OriginalSchedule,
                        [in] any TruncationDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // sequencestatistics

                sequence<sequence<any> > qlSequenceStatistics(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSequenceStatistics2(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] sequence<sequence<any> > Values,
                        [in] sequence<sequence<any> > Weights,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSequenceStatisticsAverageShortfall(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsCorrelation(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsCovariance(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsDownsideDeviation(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsDownsideVariance(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsErrorEstimate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsGaussianAverageShortfall(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsGaussianPercentile(
                        [in] any ObjectId,
                        [in] any X,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsGaussianPotentialUpside(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsGaussianShortfall(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsGaussianValueAtRisk(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsInc(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSequenceStatisticsInc2(
                        [in] any ObjectId,
                        [in] any Dimension,
                        [in] sequence<sequence<any> > Values,
                        [in] sequence<sequence<any> > Weights,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSequenceStatisticsKurtosis(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsMax(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsMean(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsMin(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsPercentile(
                        [in] any ObjectId,
                        [in] any X,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsPotentialUpside(
                        [in] any ObjectId,
                        [in] any Centile,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsRegret(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsSamples(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsSemiDeviation(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsSemiVariance(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsShortfall(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsSize(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsSkewness(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsStandardDeviation(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsValueAtRisk(
                        [in] any ObjectId,
                        [in] any Target,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsVariance(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSequenceStatisticsWeightSum(
                        [in] any ObjectId,
                        [in] any Trigger);

                // settings

                sequence<sequence<any> > qlSettingsEnforceTodaysHistoricFixings(
                        [in] any Trigger);

                sequence<sequence<any> > qlSettingsEvaluationDate(
                        [in] any Trigger);

                sequence<sequence<any> > qlSettingsSetEnforceTodaysHistoricFixings(
                        [in] long Boolean,
                        [in] any Trigger);

                sequence<sequence<any> > qlSettingsSetEvaluationDate(
                        [in] any EvalDate,
                        [in] any Trigger);

                // shortratemodels

                sequence<sequence<any> > qlHullWhite(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any A,
                        [in] any Sigma,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlModelG2(
                        [in] any ObjectId,
                        [in] any YieldCurve,
                        [in] any A,
                        [in] any Sigma,
                        [in] any B,
                        [in] any Eta,
                        [in] any Correlation,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlModelG2A(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlModelG2B(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlModelG2eta(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlModelG2rho(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlModelG2sigma(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVasicek(
                        [in] any ObjectId,
                        [in] any R0,
                        [in] any A,
                        [in] any B,
                        [in] any Sigma,
                        [in] any Lambda,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlVasicekA(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVasicekB(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVasicekLambda(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVasicekSigma(
                        [in] any ObjectId,
                        [in] any Trigger);

                // swap

                sequence<sequence<any> > qlMakeCms(
                        [in] any ObjectId,
                        [in] any SwapTenor,
                        [in] any SwapIndex,
                        [in] any IborIndex,
                        [in] any IborSpread,
                        [in] any ForwardStart,
                        [in] any CmsCouponPricer,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSwapLegBPS(
                        [in] any ObjectId,
                        [in] any LegNumber,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwapLegNPV(
                        [in] any ObjectId,
                        [in] any LegNumber,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwapMaturityDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwapStartDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                // swaption

                sequence<sequence<any> > qlMakeSwaption(
                        [in] any ObjectId,
                        [in] any SwapIndex,
                        [in] any OptionTenor,
                        [in] any Strike,
                        [in] any PricingEngineID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSwaption(
                        [in] any ObjectId,
                        [in] any VanillaSwap,
                        [in] any Exercise,
                        [in] any SettlementType,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlSwaptionImpliedVolatility(
                        [in] any ObjectId,
                        [in] any Price,
                        [in] any YieldCurve,
                        [in] any Guess,
                        [in] any Accuracy,
                        [in] any MaxIter,
                        [in] any MinVol,
                        [in] any MaxVol,
                        [in] any Displacement,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwaptionSettlementType(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlSwaptionType(
                        [in] any ObjectId,
                        [in] any Trigger);

                // swaptionvolstructure

                sequence<sequence<any> > qlConstantSwaptionVolatility(
                        [in] any ObjectId,
                        [in] any NDays,
                        [in] any Calendar,
                        [in] any BusinessDayConvention,
                        [in] any Volatility,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // termstructures

                sequence<sequence<any> > qlDiscountCurve(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > CurveDates,
                        [in] sequence<sequence<any> > CurveDiscounts,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlFlatForward(
                        [in] any ObjectId,
                        [in] any NDays,
                        [in] any Calendar,
                        [in] any Rate,
                        [in] any DayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlForwardCurve(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > CurveDates,
                        [in] sequence<sequence<any> > ForwardYields,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlForwardSpreadedTermStructure(
                        [in] any ObjectId,
                        [in] any BaseYieldCurve,
                        [in] any Spread,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlImpliedTermStructure(
                        [in] any ObjectId,
                        [in] any BaseYieldCurve,
                        [in] any ReferenceDate,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlInterpolatedYieldCurve(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > Dates,
                        [in] sequence<sequence<any> > Data,
                        [in] any Calendar,
                        [in] any DayCounter,
                        [in] sequence<sequence<any> > Jumps,
                        [in] sequence<sequence<any> > JumpDates,
                        [in] any TraitsID,
                        [in] any InterpolatorID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlRelinkableHandleYieldTermStructure(
                        [in] any ObjectId,
                        [in] any CurrentLink,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlTermStructureCalendar(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlTermStructureMaxDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlTermStructureReferenceDate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlTermStructureSettlementDays(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlYieldTSDiscount(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > DfDates,
                        [in] long AllowExtrapolation,
                        [in] any Trigger);

                sequence<sequence<any> > qlYieldTSZeroRate(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > Dates,
                        [in] any ResultDayCounter,
                        [in] any Compounding,
                        [in] any Frequency,
                        [in] long AllowExtrapolation,
                        [in] any Trigger);

                sequence<sequence<any> > qlZeroCurve(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > CurveDates,
                        [in] sequence<sequence<any> > CurveYields,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // utilities

                sequence<sequence<any> > qlAddinVersion(
                        [in] any Trigger);

                sequence<sequence<any> > qlVersion(
                        [in] any Trigger);

                // vanillaswap

                sequence<sequence<any> > qlMakeIMMSwap(
                        [in] any ObjectId,
                        [in] any SwapTenor,
                        [in] any IborIndex,
                        [in] any FixedRate,
                        [in] any FirstImmDate,
                        [in] any FixDayCounter,
                        [in] any Spread,
                        [in] any PricingEngineID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlMakeVanillaSwap(
                        [in] any ObjectId,
                        [in] any SettlDays,
                        [in] any SwapTenor,
                        [in] any IborIndex,
                        [in] any FixedRate,
                        [in] any ForwardStart,
                        [in] any FixDayCounter,
                        [in] any Spread,
                        [in] any PricingEngineID,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlVanillaSwap(
                        [in] any ObjectId,
                        [in] any PayerReceiver,
                        [in] any Nominal,
                        [in] any FixSchedule,
                        [in] any FixedRate,
                        [in] any FixDayCounter,
                        [in] any FloatingLegSchedule,
                        [in] any IborIndex,
                        [in] any Spread,
                        [in] any FloatingLegDayCounter,
                        [in] any PaymentConvention,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                sequence<sequence<any> > qlVanillaSwapFairRate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVanillaSwapFairSpread(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVanillaSwapFixedLegNPV(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVanillaSwapFixedRate(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVanillaSwapFloatingLegBPS(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVanillaSwapFloatingLegNPV(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVanillaSwapNominal(
                        [in] any ObjectId,
                        [in] any Trigger);

                sequence<sequence<any> > qlVanillaSwapSpread(
                        [in] any ObjectId,
                        [in] any Trigger);

                // volatilities

                sequence<sequence<any> > qlBlackConstantVol(
                        [in] any ObjectId,
                        [in] any SettlementDate,
                        [in] any Calendar,
                        [in] any Volatility,
                        [in] any DayCounter,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);

                // volatility

                sequence<sequence<any> > qlMarketModelLmExtLinearExponentialVolModel(
                        [in] any ObjectId,
                        [in] sequence<sequence<any> > FixingTimes,
                        [in] any A,
                        [in] any B,
                        [in] any C,
                        [in] any D,
                        [in] long Permanent,
                        [in] any Trigger,
                        [in] long Overwrite);



  };

  service CalcAddins {
    interface XCalcAddins;
    interface com::sun::star::lang::XInitialization;
    interface com::sun::star::lang::XServiceName;
    interface com::sun::star::sheet::XAddIn;           
  };
};

