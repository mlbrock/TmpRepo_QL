
/*  
 Copyright (C) 2006, 2007 Chiara Fornarola
 Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011 Ferdinando Ametrano
 Copyright (C) 2005, 2006 Eric Ehlers
 Copyright (C) 2005 Plamen Neykov
 Copyright (C) 2005 Walter Penschke
 Copyright (C) 2009 Piter Dias
 
 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
*/

// This file was generated automatically by gensrc.py.  If you edit this file
// manually then your changes will be lost the next time gensrc runs.

// This source code file was generated from the following stub:
//      gensrc/gensrc/stubs/stub.doxygen.file

/*! \page func_bonds Bonds
\section overview Overview
functions to construct and use Bond objects.
\section functionlist Function List
\ref qlBond ()\n
\ref qlBondAccrualDays ()\n
\ref qlBondAccrualEndDate ()\n
\ref qlBondAccrualPeriod ()\n
\ref qlBondAccrualStartDate ()\n
\ref qlBondAccruedAmount ()\n
\ref qlBondAccruedDays ()\n
\ref qlBondAccruedPeriod ()\n
\ref qlBondAlive ()\n
\ref qlBondAtmRateFromYieldTermStructure ()\n
\ref qlBondBpsFromYield ()\n
\ref qlBondBpsFromYieldTermStructure ()\n
\ref qlBondCalendar ()\n
\ref qlBondCleanPrice ()\n
\ref qlBondCleanPriceFromYield ()\n
\ref qlBondCleanPriceFromYieldTermStructure ()\n
\ref qlBondCleanPriceFromZSpread ()\n
\ref qlBondConvexityFromYield ()\n
\ref qlBondCurrency ()\n
\ref qlBondDescription ()\n
\ref qlBondDirtyPriceFromYield ()\n
\ref qlBondDurationFromYield ()\n
\ref qlBondFlowAnalysis ()\n
\ref qlBondIsTradable ()\n
\ref qlBondIssueDate ()\n
\ref qlBondMaturityDate ()\n
\ref qlBondMaturityLookup ()\n
\ref qlBondMaturitySort ()\n
\ref qlBondNextCashFlowAmount ()\n
\ref qlBondNextCashFlowDate ()\n
\ref qlBondNextCouponRate ()\n
\ref qlBondNotional ()\n
\ref qlBondNotionals ()\n
\ref qlBondPreviousCashFlowAmount ()\n
\ref qlBondPreviousCashFlowDate ()\n
\ref qlBondPreviousCouponRate ()\n
\ref qlBondRedemptionAmount ()\n
\ref qlBondRedemptionDate ()\n
\ref qlBondReferencePeriodEnd ()\n
\ref qlBondReferencePeriodStart ()\n
\ref qlBondSetCouponPricer ()\n
\ref qlBondSetCouponPricers ()\n
\ref qlBondSettlementDate ()\n
\ref qlBondSettlementDays ()\n
\ref qlBondStartDate ()\n
\ref qlBondYieldFromCleanPrice ()\n
\ref qlBondZSpreadFromCleanPrice ()\n
\ref qlCmsRateBond ()\n
\ref qlFixedRateBond ()\n
\ref qlFixedRateBond2 ()\n
\ref qlFloatingRateBond ()\n
\ref qlZeroCouponBond ()\n

\section documentation Function Documentation
\anchor qlBond \b qlBond
\code

string returnValue

qlBond(
        string ObjectId
        string Description
        string Currency
        long SettlementDays
        string Calendar
        double FaceAmount
        long MaturityDate
        long IssueDate
        string LegID
        bool Permanent
        any Trigger
        bool Overwrite)

\endcode
\par Description:

Construct an object of class Bond and return its id

\par Supported Platforms:

C++, Calc, Excel

\param ObjectId id of object to be created
\param Description Bond description string. Autogenerated if null Default value = std::string().
\param Currency bond Currency. Default value = NullCurrency.
\param SettlementDays settlement days. Default value = 3.
\param Calendar holiday calendar (e.g. TARGET). Default value = NullCalendar.
\param FaceAmount Face nominal amount. Default value = 100.0.
\param MaturityDate maturity date. Default value = QuantLib::Date().
\param IssueDate issue date: the bond can't be traded until then. Default value = QuantLib::Date().
\param LegID coupon vector Leg object ID.
\param Permanent object permanent/nonpermanent
\param Trigger dependency tracking trigger
\param Overwrite overwrite flag



\anchor qlBondAccrualDays \b qlBondAccrualDays
\code

long returnValue

qlBondAccrualDays(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the total number of accrual days for the current coupon of the given bond. The current bond settlement is used if no date is given.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAccrualEndDate \b qlBondAccrualEndDate
\code

long returnValue

qlBondAccrualEndDate(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the accrual end date for the current coupon of the given bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAccrualPeriod \b qlBondAccrualPeriod
\code

double returnValue

qlBondAccrualPeriod(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the total accrual period for the current coupon of the given bond. The current bond settlement is used if no date is given.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAccrualStartDate \b qlBondAccrualStartDate
\code

long returnValue

qlBondAccrualStartDate(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the accrual start date for the current coupon of the given bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAccruedAmount \b qlBondAccruedAmount
\code

double returnValue

qlBondAccruedAmount(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the accrued amount for the given bond. The current bond settlement is used if no date is given.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAccruedDays \b qlBondAccruedDays
\code

long returnValue

qlBondAccruedDays(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the accrued days for the current coupon of the given bond. The current bond settlement is used if no date is given.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAccruedPeriod \b qlBondAccruedPeriod
\code

double returnValue

qlBondAccruedPeriod(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the accrued period for the current coupon of the given bond. The current bond settlement is used if no date is given.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAlive \b qlBondAlive
\code

vector<string> returnValue

qlBondAlive(
        vector<string> Bonds
        long RefDate
        any Trigger)

\endcode
\par Description:

filters the Bond object IDs of the still alive Bonds.

\par Supported Platforms:

Excel

\param Bonds vector of Bond IDs.
\param RefDate reference date at which evaluate alive bonds. The current evaluation date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondAtmRateFromYieldTermStructure \b qlBondAtmRateFromYieldTermStructure
\code

double returnValue

qlBondAtmRateFromYieldTermStructure(
        string ObjectId
        string YieldCurve
        long SettlementDate
        double CleanPrice
        any Trigger)

\endcode
\par Description:

Returns the ATM rate implied by the given YieldTermStructure, settlement date, and clean price.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param YieldCurve discounting YieldTermStructure object ID.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param CleanPrice clean price.
\param Trigger dependency tracking trigger



\anchor qlBondBpsFromYield \b qlBondBpsFromYield
\code

double returnValue

qlBondBpsFromYield(
        string ObjectId
        double Yield
        string DayCounter
        string Compounding
        string Frequency
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the basis point sensitivity implied by the given yield and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Yield bond yield.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondBpsFromYieldTermStructure \b qlBondBpsFromYieldTermStructure
\code

double returnValue

qlBondBpsFromYieldTermStructure(
        string ObjectId
        string YieldCurve
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the basis point sensitivity implied by the given YieldTermStructure and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param YieldCurve discounting YieldTermStructure object ID.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondCalendar \b qlBondCalendar
\code

string returnValue

qlBondCalendar(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the calendar of the bond, e.g. TARGET.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondCleanPrice \b qlBondCleanPrice
\code

double returnValue

qlBondCleanPrice(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the clean price for the given bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondCleanPriceFromYield \b qlBondCleanPriceFromYield
\code

double returnValue

qlBondCleanPriceFromYield(
        string ObjectId
        double Yield
        string DayCounter
        string Compounding
        string Frequency
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the bond clean price implied by the given yield and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Yield bond yield.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondCleanPriceFromYieldTermStructure \b qlBondCleanPriceFromYieldTermStructure
\code

double returnValue

qlBondCleanPriceFromYieldTermStructure(
        string ObjectId
        string YieldCurve
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the bond clean price implied by the given YieldTermStructure and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param YieldCurve discounting YieldTermStructure object ID.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondCleanPriceFromZSpread \b qlBondCleanPriceFromZSpread
\code

double returnValue

qlBondCleanPriceFromZSpread(
        string ObjectId
        string YieldCurve
        double ZSpread
        string DayCounter
        string Compounding
        string Frequency
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the bond clean price implied by the given Z-Spread, discount curve, and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param YieldCurve discounting YieldTermStructure object ID.
\param ZSpread the Z-spread.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondConvexityFromYield \b qlBondConvexityFromYield
\code

double returnValue

qlBondConvexityFromYield(
        string ObjectId
        double Yield
        string DayCounter
        string Compounding
        string Frequency
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the convexity implied by the given yield and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Yield bond yield.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondCurrency \b qlBondCurrency
\code

string returnValue

qlBondCurrency(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the bond currency.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLibAddin::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondDescription \b qlBondDescription
\code

string returnValue

qlBondDescription(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the bond description string.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLibAddin::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondDirtyPriceFromYield \b qlBondDirtyPriceFromYield
\code

double returnValue

qlBondDirtyPriceFromYield(
        string ObjectId
        double Yield
        string DayCounter
        string Compounding
        string Frequency
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the bond dirty price implied by the given yield and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Yield bond yield.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondDurationFromYield \b qlBondDurationFromYield
\code

double returnValue

qlBondDurationFromYield(
        string ObjectId
        double Yield
        string DayCounter
        string Compounding
        string Frequency
        string DurationType
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the duration implied by the given yield and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Yield bond yield.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param DurationType Duration type (Simple, Macaulay, or Modified). Default value = Modified.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondFlowAnalysis \b qlBondFlowAnalysis
\code

vector<vector<any> > returnValue

qlBondFlowAnalysis(
        string ObjectId
        long AfterDate
        any Trigger)

\endcode
\par Description:

Returns the bond cash flow analysis.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLibAddin::Bond object
\param AfterDate Shows only cashflows after given date Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondIsTradable \b qlBondIsTradable
\code

bool returnValue

qlBondIsTradable(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns TRUE if the given Bond is tradable at the given settlement date. The current bond settlement is used if no date is given.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondIssueDate \b qlBondIssueDate
\code

long returnValue

qlBondIssueDate(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the issue date of the bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondMaturityDate \b qlBondMaturityDate
\code

long returnValue

qlBondMaturityDate(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the maturity date of the bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondMaturityLookup \b qlBondMaturityLookup
\code

string returnValue

qlBondMaturityLookup(
        vector<string> Bonds
        long Maturity
        any Trigger)

\endcode
\par Description:

returns the first maturity-matching Bond object ID.

\par Supported Platforms:

Excel

\param Bonds vector of Bond IDs.
\param Maturity maturity date to look up Bonds for.
\param Trigger dependency tracking trigger



\anchor qlBondMaturitySort \b qlBondMaturitySort
\code

vector<string> returnValue

qlBondMaturitySort(
        vector<string> Bonds
        any Trigger)

\endcode
\par Description:

sorts the Bond object IDs by maturity.

\par Supported Platforms:

Excel

\param Bonds vector of Bond IDs.
\param Trigger dependency tracking trigger



\anchor qlBondNextCashFlowAmount \b qlBondNextCashFlowAmount
\code

double returnValue

qlBondNextCashFlowAmount(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the next cash flow date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondNextCashFlowDate \b qlBondNextCashFlowDate
\code

long returnValue

qlBondNextCashFlowDate(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the next cash flow amount.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondNextCouponRate \b qlBondNextCouponRate
\code

double returnValue

qlBondNextCouponRate(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the next coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the already-fixed not-yet-paid one.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondNotional \b qlBondNotional
\code

double returnValue

qlBondNotional(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the notional of the bond at a given date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondNotionals \b qlBondNotionals
\code

vector<double> returnValue

qlBondNotionals(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the notionals of the bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondPreviousCashFlowAmount \b qlBondPreviousCashFlowAmount
\code

double returnValue

qlBondPreviousCashFlowAmount(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the previous cash flow amount.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondPreviousCashFlowDate \b qlBondPreviousCashFlowDate
\code

long returnValue

qlBondPreviousCashFlowDate(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the previous cash flow date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondPreviousCouponRate \b qlBondPreviousCouponRate
\code

double returnValue

qlBondPreviousCouponRate(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the previous coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the last paid one.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondRedemptionAmount \b qlBondRedemptionAmount
\code

double returnValue

qlBondRedemptionAmount(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the redemption amount of the bond.

\par Supported Platforms:

Excel

\param ObjectId id of existing QuantLibAddin::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondRedemptionDate \b qlBondRedemptionDate
\code

long returnValue

qlBondRedemptionDate(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the redemption payment date of the bond.

\par Supported Platforms:

Excel

\param ObjectId id of existing QuantLibAddin::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondReferencePeriodEnd \b qlBondReferencePeriodEnd
\code

long returnValue

qlBondReferencePeriodEnd(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the reference period end date for the current coupon of the given bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondReferencePeriodStart \b qlBondReferencePeriodStart
\code

long returnValue

qlBondReferencePeriodStart(
        string ObjectId
        long SettlementDate
        any Trigger)

\endcode
\par Description:

Returns the reference period start date for the current coupon of the given bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondSetCouponPricer \b qlBondSetCouponPricer
\code

void returnValue

qlBondSetCouponPricer(
        string ObjectId
        string FloatingRateCouponPricer
        any Trigger)

\endcode
\par Description:

Set the coupon pricer at the given Bond object.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLibAddin::Bond object
\param FloatingRateCouponPricer FloatingRate coupon pricer object ID.
\param Trigger dependency tracking trigger



\anchor qlBondSetCouponPricers \b qlBondSetCouponPricers
\code

void returnValue

qlBondSetCouponPricers(
        string ObjectId
        vector<string> FloatingRateCouponPricer
        any Trigger)

\endcode
\par Description:

Set the coupon pricer at the given Bond object.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLibAddin::Bond object
\param FloatingRateCouponPricer FloatingRate coupon pricer object ID.
\param Trigger dependency tracking trigger



\anchor qlBondSettlementDate \b qlBondSettlementDate
\code

long returnValue

qlBondSettlementDate(
        string ObjectId
        long EvaluationDate
        any Trigger)

\endcode
\par Description:

Returns the settlement date of the bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param EvaluationDate The current global Settings::EvaluationDate is used if no specific date is given. Default value = QuantLib::Date().
\param Trigger dependency tracking trigger



\anchor qlBondSettlementDays \b qlBondSettlementDays
\code

long returnValue

qlBondSettlementDays(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the number of settlement days of the bond.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondStartDate \b qlBondStartDate
\code

long returnValue

qlBondStartDate(
        string ObjectId
        any Trigger)

\endcode
\par Description:

Returns the start (i.e. first accrual) date for the given Bond object.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param Trigger dependency tracking trigger



\anchor qlBondYieldFromCleanPrice \b qlBondYieldFromCleanPrice
\code

double returnValue

qlBondYieldFromCleanPrice(
        string ObjectId
        double CleanPrice
        string DayCounter
        string Compounding
        string Frequency
        long SettlementDate
        double Accuracy
        long MaxIterations
        double Guess
        any Trigger)

\endcode
\par Description:

Returns the yield for the given bond corresponding to the given clean price and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param CleanPrice clean price.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Accuracy tolerance. Default value = 1.0e-10.
\param MaxIterations max number of iterations. Default value = 100.
\param Guess guess. Default value = 0.05.
\param Trigger dependency tracking trigger



\anchor qlBondZSpreadFromCleanPrice \b qlBondZSpreadFromCleanPrice
\code

double returnValue

qlBondZSpreadFromCleanPrice(
        string ObjectId
        double CleanPrice
        string YieldCurve
        string DayCounter
        string Compounding
        string Frequency
        long SettlementDate
        double Accuracy
        long MaxIterations
        double Guess
        any Trigger)

\endcode
\par Description:

Returns the z-spread for the given bond corresponding to the given clean price and settlement date.

\par Supported Platforms:

Calc, Excel

\param ObjectId id of existing QuantLib::Bond object
\param CleanPrice clean price.
\param YieldCurve discounting YieldTermStructure object ID.
\param DayCounter Yield DayCounter ID. Default value = Actual/Actual (ISDA).
\param Compounding Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}). Default value = Compounded.
\param Frequency frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). Default value = Annual.
\param SettlementDate The current bond settlement date is used if no specific date is given. Default value = QuantLib::Date().
\param Accuracy tolerance. Default value = 1.0e-10.
\param MaxIterations max number of iterations. Default value = 100.
\param Guess guess. Default value = 0.0.
\param Trigger dependency tracking trigger



\anchor qlCmsRateBond \b qlCmsRateBond
\code

string returnValue

qlCmsRateBond(
        string ObjectId
        string Description
        string Currency
        long SettlementDays
        string PaymentBDC
        double FaceAmount
        string ScheduleID
        long FixingDays
        bool IsInArrears
        string DayCounter
        vector<double> Floors
        vector<double> Gearings
        string SwapIndex
        vector<double> Spreads
        vector<double> Caps
        double Redemption
        long IssueDate
        bool Permanent
        any Trigger
        bool Overwrite)

\endcode
\par Description:

Construct an object of class CmsRateBond and return its id

\par Supported Platforms:

C++, Calc, Excel

\param ObjectId id of object to be created
\param Description Bond description string. Autogenerated if null Default value = std::string().
\param Currency bond Currency.
\param SettlementDays settlement days.
\param PaymentBDC payment business day convention. Default value = Following.
\param FaceAmount Face nominal amount. Default value = 100.0.
\param ScheduleID Schedule object ID.
\param FixingDays fixing days (e.g. 2). Default value = QuantLib::Null<QuantLib::Natural>().
\param IsInArrears TRUE if the fixing is in arrears. Default value = false.
\param DayCounter Payment DayCounter ID.
\param Floors floor strikes. Default value = std::vector<QuantLib::Rate>().
\param Gearings floating rate gearings. Default value = 1.0.
\param SwapIndex floating swap rate index.
\param Spreads floating rate spreads. Default value = 0.0.
\param Caps cap strikes. Default value = std::vector<QuantLib::Rate>().
\param Redemption Redemption value. Default value = 100.
\param IssueDate issue date: the bond can't be traded until then. Default value = QuantLib::Date().
\param Permanent object permanent/nonpermanent
\param Trigger dependency tracking trigger
\param Overwrite overwrite flag



\anchor qlFixedRateBond \b qlFixedRateBond
\code

string returnValue

qlFixedRateBond(
        string ObjectId
        string Description
        string Currency
        long SettlementDays
        double FaceAmount
        string ScheduleID
        vector<double> Coupons
        string DayCounter
        string PaymentBDC
        double Redemption
        long IssueDate
        string PaymentCalendar
        bool Permanent
        any Trigger
        bool Overwrite)

\endcode
\par Description:

Construct an object of class FixedRateBond and return its id

\par Supported Platforms:

C++, Calc, Excel

\param ObjectId id of object to be created
\param Description Bond description string. Autogenerated if null Default value = std::string().
\param Currency bond Currency.
\param SettlementDays settlement days.
\param FaceAmount Face nominal amount. Default value = 100.0.
\param ScheduleID Schedule object ID.
\param Coupons simple annual compounding coupon rates.
\param DayCounter Payment DayCounter ID.
\param PaymentBDC payment business day convention. Default value = Following.
\param Redemption Redemption value. Default value = 100.0.
\param IssueDate issue date: the bond can't be traded until then. Default value = QuantLib::Date().
\param PaymentCalendar payment holiday calendar (e.g. TARGET).
\param Permanent object permanent/nonpermanent
\param Trigger dependency tracking trigger
\param Overwrite overwrite flag



\anchor qlFixedRateBond2 \b qlFixedRateBond2
\code

string returnValue

qlFixedRateBond2(
        string ObjectId
        string Description
        string Currency
        long SettlementDays
        double FaceAmount
        string ScheduleID
        vector<string> Coupons
        string PaymentBDC
        double Redemption
        long IssueDate
        string PaymentCalendar
        bool Permanent
        any Trigger
        bool Overwrite)

\endcode
\par Description:

Construct an object of class FixedRateBond and return its id

\par Supported Platforms:

C++, Calc, Excel

\param ObjectId id of object to be created
\param Description Bond description string. Autogenerated if null Default value = std::string().
\param Currency bond Currency.
\param SettlementDays settlement days.
\param FaceAmount Face nominal amount. Default value = 100.0.
\param ScheduleID Schedule object ID.
\param Coupons coupon InterestRate IDs.
\param PaymentBDC payment business day convention. Default value = Following.
\param Redemption Redemption value. Default value = 100.0.
\param IssueDate issue date: the bond can't be traded until then. Default value = QuantLib::Date().
\param PaymentCalendar payment holiday calendar (e.g. TARGET).
\param Permanent object permanent/nonpermanent
\param Trigger dependency tracking trigger
\param Overwrite overwrite flag



\anchor qlFloatingRateBond \b qlFloatingRateBond
\code

string returnValue

qlFloatingRateBond(
        string ObjectId
        string Description
        string Currency
        long SettlementDays
        string PaymentBDC
        double FaceAmount
        string ScheduleID
        long FixingDays
        bool IsInArrears
        string DayCounter
        vector<double> Floors
        vector<double> Gearings
        string IborIndex
        vector<double> Spreads
        vector<double> Caps
        double Redemption
        long IssueDate
        bool Permanent
        any Trigger
        bool Overwrite)

\endcode
\par Description:

Construct an object of class FloatingRateBond and return its id

\par Supported Platforms:

C++, Calc, Excel

\param ObjectId id of object to be created
\param Description Bond description string. Autogenerated if null Default value = std::string().
\param Currency bond Currency.
\param SettlementDays settlement days.
\param PaymentBDC payment business day convention. Default value = Following.
\param FaceAmount Face nominal amount. Default value = 100.0.
\param ScheduleID Schedule object ID.
\param FixingDays fixing days (e.g. 2). Default value = QuantLib::Null<QuantLib::Natural>().
\param IsInArrears TRUE if the fixing is in arrears. Default value = false.
\param DayCounter Payment DayCounter ID.
\param Floors floor strikes. Default value = std::vector<QuantLib::Rate>().
\param Gearings floating rate gearings. Default value = 1.0.
\param IborIndex floating rate index.
\param Spreads floating rate spreads. Default value = 0.0.
\param Caps cap strikes. Default value = std::vector<QuantLib::Rate>().
\param Redemption Redemption value. Default value = 100.
\param IssueDate issue date: the bond can't be traded until then. Default value = QuantLib::Date().
\param Permanent object permanent/nonpermanent
\param Trigger dependency tracking trigger
\param Overwrite overwrite flag



\anchor qlZeroCouponBond \b qlZeroCouponBond
\code

string returnValue

qlZeroCouponBond(
        string ObjectId
        string Description
        string Currency
        long SettlementDays
        string Calendar
        double FaceAmount
        long Maturity
        string PaymentBDC
        double Redemption
        long IssueDate
        bool Permanent
        any Trigger
        bool Overwrite)

\endcode
\par Description:

Construct an object of class ZeroCouponBond and return its id

\par Supported Platforms:

C++, Calc, Excel

\param ObjectId id of object to be created
\param Description Bond description string. Autogenerated if null Default value = std::string().
\param Currency bond Currency.
\param SettlementDays settlement days.
\param Calendar holiday calendar (e.g. TARGET).
\param FaceAmount Face nominal amount. Default value = 100.0.
\param Maturity maturity date.
\param PaymentBDC payment business day convention. Default value = Following.
\param Redemption Redemption value. Default value = 100.
\param IssueDate issue date: the bond can't be traded until then. Default value = QuantLib::Date().
\param Permanent object permanent/nonpermanent
\param Trigger dependency tracking trigger
\param Overwrite overwrite flag





*/


